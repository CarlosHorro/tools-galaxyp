<tool id="proteomics_moff" name="moFF: A modest Feature Finder" version="@VERSION@">
    <description>extracts MS1 intensities from Thermo raw files</description>
    <macros>
        <token name="@VERSION@">1.2</token>
        <!-- xml macros, used for shared Galaxy parameter inputs -->
        <xml name="ident_input_macro" token_allow_multiple="true">
        <!-- this is exactly the same across all three, except for allowing multiple in MBR and all but not in moff -->
            <conditional name="ident_input">
                    <param name="input_type_selector" type="select" label="Choose the format for the identification file:">
                        <option value="ps">Peptide Shaker PSM report (standard, not extended)</option>
                        <option value="generic">Another tabular identification file</option>
                    </param>
                    <when value="ps">
                        <param name="psm_input" type="data" format="tabular" label="Peptide Shaker PSM report" multiple="@ALLOW_MULTIPLE@"/>
                    </when>
                    <when value="generic">
                        <param name="generic_input" type="data" format="tabular" label="A general tabular format" multiple="@ALLOW_MULTIPLE@"
                            help="Must have specific columns; see below to select these columns from your file. The file should have at most one header line. "/>
                        <param name="remove_header" type="boolean" value="false" label="Does the file have a header line?"/>
                        <param name="peptide"
                            type="data_column"
                            data_ref="generic_input"
                            label="Column with peptide-spectrum-match sequence"/>
                        <param name="prot"
                            type="data_column"
                            data_ref="generic_input"
                            label="Column with protein ID"/>
                        <param name="mod_peptide"
                            type="data_column"
                            data_ref="generic_input"
                            label="Column with peptide-spectrum-match sequence that contains possible modifications"/>
                        <param name="rt"
                            type="data_column"
                            data_ref="generic_input"
                            label="Column with PSM retention time (in second)"/>
                        <param name="mz"
                            type="data_column"
                            data_ref="generic_input"
                            label="Column with m/z (mass over charge)"/>
                        <param name="mass"
                            type="data_column"
                            data_ref="generic_input"
                            label="Column with mass of the peptide"/>
                        <param name="charge"
                            type="data_column"
                            data_ref="generic_input"
                            label="Column with charge of ionized peptide"/>
                    </when>
            </conditional>
        </xml>
        <xml name="raw_input_macro" token_allow_multiple="true">
            <conditional name="msms_input">
                <param name="input_type_selector" type="select" label="Choose the format for the MS/MS file">
                    <option value="raw">Thermo RAW file</option>
                    <option value="mzml">mzML</option>
                </param>
                <when value="raw">
                    <param argument="--inputraw" type="data" multiple="@ALLOW_MULTIPLE@" format="raw" label="RAW file(s)"
                        help=""/>
                </when>
                <when value="mzml">
                    <param argument="--inputraw" type="data" multiple="@ALLOW_MULTIPLE@" format="mzml" label="mzML file(s)"/>
                </when>
            </conditional>
        </xml>
        <!-- tokens (code snippets used in <command>) -->
        <token name="@IDENT_INPUT_ARG_MULTIPLE@"><![CDATA[
            ## this is where the ident input gets passed to moff/moff_all/moff_mbr
            #if $task.ident_input.input_type_selector == "ps":
                --inputtsv
                #for $filename in $task.ident_input.psm_input:
                    './ident_inputs/${filename.display_name}'
            #end for
            #else
                --inputtsv
                #for $filename in $task.ident_input.generic_input:
                    './ident_inputs/${filename.display_name}'
                #end for
            #end if
        ]]></token>
        <token name="@IDENT_INPUT_ARG_SINGLE@"><![CDATA[
            ## this is where the ident input gets passed to moff/moff_all/moff_mbr
            #if $task.ident_input.input_type_selector == "ps":
                --inputtsv './ident_inputs/${task.ident_input.psm_input.display_name}'
            #else
                --inputtsv './ident_inputs/${task.ident_input.generic_input.display_name}'
            #end if
        ]]></token>
        <token name="@WRANGLE_IDENT_INPUT_SINGLE@"><![CDATA[
            mkdir ./ident_inputs &&
            #if $task.ident_input.input_type_selector == "ps":
                ln -s '$task.ident_input.psm_input' './ident_inputs/$task.ident_input.psm_input.display_name' &&
            #else
                ## optionally remove first line
                #if $task.ident_input.remove_header:
                    sed -i '1d' '$task.ident_input.generic_input' &&
                #end if
                ## header row with correct names: "peptide", "prot", "mod_peptide", "rt", "mz", "mass", and "charge"
                echo -e "peptide\tprot\tmod_peptide\trt\tmz\tmass\tcharge" > tempfile.tab &&
                awk 'BEGIN{OFS="\t"; FS="\t"}{print \$pep,\$prot,\$mod,\$rt,\$mz,\$mass,\$charge}' pep="${task.ident_input.peptide}" prot="$task.ident_input.prot" mod="$task.ident_input.mod_peptide" rt="$task.ident_input.rt" mz="$task.ident_input.mz" mass="$task.ident_input.mass" charge="$task.ident_input.charge" '$task.ident_input.generic_input' >> tempfile.tab &&
                mv tempfile.tab '$task.ident_input.generic_input' &&
                ln -s '$task.ident_input.generic_input' './ident_inputs/$task.ident_input.generic_input.display_name' &&
            #end if
        ]]></token>
        <token name="@WRANGLE_IDENT_INPUT_MULTIPLE@"><![CDATA[
            mkdir ./ident_inputs &&
            #if $task.ident_input.input_type_selector == "ps":
                #for $filename in $task.ident_input.psm_input:
                    ln -s '$filename' './ident_inputs/$filename.display_name' &&
                #end for
            #else
                #for $filename in $task.ident_input.generic_input:
                    ## remove first line (add param for this later on!)
                    #if $task.ident_input.remove_header:
                        sed -i '1d' '$filename' &&
                    #end if
                    ## header row with correct names: "peptide", "prot", "mod_peptide", "rt", "mz", "mass", and "charge"
                    echo -e "peptide\tprot\tmod_peptide\trt\tmz\tmass\tcharge" > tempfile.tab &&
                    awk 'BEGIN{OFS="\t"; FS="\t"}{print \$pep,\$prot,\$mod,\$rt,\$mz,\$mass,\$charge}' pep="${task.ident_input.peptide}" prot="$task.ident_input.prot" mod="$task.ident_input.mod_peptide" rt="$task.ident_input.rt" mz="$task.ident_input.mz" mass="$task.ident_input.mass" charge="$task.ident_input.charge" '$filename' >> tempfile.tab &&
                    mv tempfile.tab '$filename' &&
                    ln -s '$filename' './ident_inputs/$filename.display_name' &&
                #end for
            #end if
        ]]></token>
        <token name="@RAW_INPUT_ARG_SINGLE@"><![CDATA[
            --inputraw './raws/$task.msms_input.inputraw.display_name'
        ]]></token>
        <token name="@RAW_INPUT_ARG_MULTIPLE@"><![CDATA[
            --inputraw
            #for $filename in $task.msms_input.inputraw:
                './raws/$filename.display_name'
            #end for
        ]]></token>
        <token name="@WRANGLE_RAW_INPUT_SINGLE@"><![CDATA[
            mkdir ./raws &&
            ## for files, need to softlink the display name to the history item
            ln -s '$task.msms_input.inputraw' './raws/$task.msms_input.inputraw.display_name' &&
        ]]></token>
        <token name="@WRANGLE_RAW_INPUT_MULTIPLE@"><![CDATA[
            mkdir ./raws &&
            ## for files, need to softlink the display name to the history item
            #for $filename in $task.msms_input.inputraw:
                ln -s '$filename' './raws/$filename.display_name' &&
            #end for
        ]]></token>
    </macros>
    <requirements>
        <requirement type="package" version="@VERSION@">moff</requirement>
    </requirements>
    <command detect_errors="aggressive"><![CDATA[
        mkdir ./out &&
        #if $task.task_selector == "moff":
            @WRANGLE_IDENT_INPUT_SINGLE@
            @WRANGLE_RAW_INPUT_SINGLE@
            moff.py
                @IDENT_INPUT_ARG_SINGLE@
                @RAW_INPUT_ARG_SINGLE@
                --tol $task.tol
                --rt_w $task.rt_w
                --rt_p $task.rt_p
                --output_folder ./out
                #if ($task.peptide_summary):
                    --peptide_summary 1
                #end if
            &&
            #if $task.peptide_summary:
                mv ./out/peptide_summary_intensity_moFF_run.tab '$output_peptide_summary' &&
            #end if
            mv ./out/*moff_result.txt '$output_table'
            &&
            mv ./out/*.log '$output_logs'
        #else if $task.task_selector == "mbr":
           @WRANGLE_IDENT_INPUT_MULTIPLE@
           moff_mbr.py
                --inputF ./ident_inputs
                --ext $task.ext
           && 
           mv ./ident_inputs/mbr_output/* ./out
        #else:
           ## moff_all (mbr followed by apex)
           @WRANGLE_IDENT_INPUT_MULTIPLE@
           @WRANGLE_RAW_INPUT_MULTIPLE@
           moff_all.py
               @IDENT_INPUT_ARG_MULTIPLE@
               @RAW_INPUT_ARG_MULTIPLE@
               --tol $task.tol
               --rt_w $task.rt_w
               --rt_p $task.rt_p
               --rt_p_match $task.rt_p_match
               --output_folder ./out
               --ext txt
               #if $task.peptide_summary:
                   --peptide_summary 1
               #end if
           &&
           #if $task.peptide_summary:
               mv ./out/peptide_summary_intensity_moFF_run.tab '$output_peptide_summary' &&
           #end if
           echo 'other results go here'
        #end if
    ]]></command>
    <inputs>
        <conditional name="task">
            <param name="task_selector" type="select" label="Choose which module to run">
                <option value="moff" selected="true">Apex intensity</option>
                <option value="mbr">Match between runs</option>
                <option value="all">All (match-between-runs followed by quantitation)</option>
            </param>
            <when value = "moff">
                <expand macro="ident_input_macro" allow_multiple="false"/>
                <expand macro="raw_input_macro" allow_multiple="false"/>
                <param argument="--tol" type="float" value="10" label="Tolerance parameter"
                    help="Specify the tolerance parameter in ppm." />
                <param argument="--rt_w" type="float" value="3.0" label="Retention time window"
                    help="Specify rt window for xic in minutes." />
                <param argument="--rt_p" type="float" value="1" label="Time window for the peak"
                    help="Specify the time windows for the peak in minutes." />
                <param argument="--rt_p_match" type="float" value="1.5" label="Time window for the matched peak"
                    help="Specify the time windows for the matched peak in minutes." />
                <param argument="--peptide_summary" type="boolean" value="true" label="Output the peptide summary?"/>
            </when>
            <when value="mbr">
                <expand macro="ident_input_macro" allow_multiple="true"/>
                <param argument="--ext" type="text" value="tab" label="Provide the extension used in the display file name (without the period)"/>
            </when>
            <when value="all">
                <expand macro="ident_input_macro" allow_multiple="true"/>
                <expand macro="raw_input_macro" allow_multiple="true"/>
                <param argument="--tol" type="float" value="10" label="Tolerance parameter"
                    help="Specify the tolerance parameter in ppm." />
                <param argument="--rt_w" type="float" value="3.0" label="Retention time window"
                    help="Specify rt window for xic in minutes." />
                <param argument="--rt_p" type="float" value="1" label="Time window for the peak"
                    help="Specify the time windows for the peak in minutes." />
                <param argument="--rt_p_match" type="float" value="1.2" label="Time window for the matched peak"
                    help="Specify the time windows for the matched peak in minutes." />
                <param argument="--peptide_summary" type="boolean" value="true" label="Output the peptide summary?"/>
            </when>
        </conditional> 
    </inputs>
    <outputs>
        <data format="tabular" name="output_table">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.txt" format="tabular" directory="out" visible="true"/>
        </data>
        <data format="txt" name="output_logs" >
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.log" format="txt" directory="out" visible="true"/>
        </data>
        <data format="tabular" name="output_peptide_summary">
            <filter>task['peptide_summary']</filter>
        </data>
    </outputs>
    <tests>
        <!-- test moff_all -->
        <test>
            <param name="task_selector" value="all"/>
            <param name="input_type_selector" value="ps"/>
            <param name="psm_input" value="input/mbr_test1.tabular,input/mbr_test2.tabular" ftype="tabular"/>
            <param name="inputraw" value="input/mbr_test1.mzml,input/mbr_test2.mzml" ftype="mzml"/>
            <param name="peptide_summary" value="true"/>
            <output name="output_peptide_summary" ftype="tabular" file="output1/moff_mbr_test_pepsum.tab"/>
        </test>
        <!-- test moff alone -->
        <test>
            <param name="task_selector" value="moff"/>
            <param name="input_type_selector" value="ps"/>
            <param name="psm_input" value="input/test.tabular" ftype="tabular"/>
            <param name="msms_input" value="mzml"/>
            <param name="inputraw" value="input/test.mzml" ftype="mzml"/>
            <param name="peptide_summary" value="true"/>
            <output name="output_peptide_summary" ftype="tabular" file="output2/moff_test_pepsum.tab"/>
        </test>
        <!-- test the generic input -->
        <test>
            <param name="task_selector" value="moff"/>
            <param name="input_type_selector" value="generic"/>
            <param name="generic_input" value="input/test.tabular" ftype="tabular"/>
            <param name="remove_header" value="true"/>
            <param name="msms_input" value="mzml"/>
            <param name="inputraw" value="input/test.mzml" ftype="mzml"/>
            <param name="peptide" value="3"/>
            <param name="prot" value="2"/>
            <param name="mod_peptide" value="7"/>
            <param name="rt" value="13"/>
            <param name="mz" value="14"/>
            <param name="mass" value="17"/>
            <param name="charge" value="15"/>
            <param name="peptide_summary" value="true"/>
            <output name="output_peptide_summary" ftype="tabular" file="output2/moff_test_pepsum.tab"/>
        </test>
        <!-- test mbr -->
        <test>
            <param name="task_selector" value="mbr"/>
            <param name="input_type_selector" value="ps"/>
            <param name="psm_input" value="input/mbr_test1.tabular,input/mbr_test2.tabular" ftype="tabular"/>
            <param name="ext" value="tabular"/>
            <output name="output_table">
                <discovered_dataset designation="mbr_test1_match" file="input/mbr_output/mbr_test1_match.txt"/>
                <discovered_dataset designation="mbr_test2_match" file="input/mbr_output/mbr_test2_match.txt"/>
            </output>
        </test>
    </tests>
    <help>
    <![CDATA[
**Description**

moFF is an OS independent tool designed to extract 
apex MS1 intensity using a set of identified MS2 peptides. 
It currently uses a Go library to directly extract data from Thermo Raw spectrum files, 
eliminating the need for conversions from other formats. 
Moreover, moFF also allows to work directly with mzML files.

**Usage**

Modules: 

1. Apex Intensity: this is used for a single pair of files, one identification and one spectrum file. 
2. Match between runs: for multiple identification files, share MS2 identified peptides between runs and predict the retention time. 
3. All (match between runs followed by apex intensity): this is used for more than one pair of identification and spectrum files. 

If both match between runs and apex intensity are desired, it is best to run them both at once (run the 'All' module). 


Inputs:

- Identification file: this can either be a generic tabular file or the standard PSM report from PeptideShaker.
  If it is a generic tabular file, please select the columns corresponding to the required information. 

- MS/MS file: this can either be a Thermo raw file or an mzML file.

A given pair of files must have the *exact* same display name, not including the extension; 
e.g. ``example1.tabular`` and ``example1.mzml``.
If the display names are different, simply change them in the history menu.  

Parameters: 

All the parameters related to the the time windows (``rt_w``, ``rt_p``, ``rt_p_match``) are basically the 
half of the entire time windows where the apex peak is searched or the XIC is retrieved.
For correct rt windows, we suggest you set the ``rt_p`` value equal to or slighly greater than the 
dynamic exclusion duration set in your machine. We suggest also to set the 
``rt_p_match`` always slightly bigger than tha values used for ``rt_p``. 

**More Information**

See the moFF Github site at https://github.com/compomics/moFF, 
and the publication at https://dx.doi.org/10.1038/nmeth.4075 

    ]]>
    </help>
    <citations>
        <citation type="doi">10.1038/nmeth.4075</citation>
    </citations>
</tool>
