<?xml version='1.0' encoding='UTF-8'?>
<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [Peptide property prediction]-->
<tool id="RTPredict" name="RTPredict" version="@TOOL_VERSION@+galaxy@GALAXY_VERSION@" profile="20.05">
  <description>Predicts retention times for peptides using a model trained by RTModel.</description>
  <macros>
    <token name="@EXECUTABLE@">RTPredict</token>
    <import>macros.xml</import>
    <import>macros_autotest.xml</import>
    <import>macros_test.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
#if $in_id:
  mkdir in_id &&
  ln -s '$in_id' 'in_id/${re.sub("[^\w\-_]", "_", $in_id.element_identifier)}.$gxy2omsext($in_id.ext)' &&
#end if
#if $in_text:
  mkdir in_text &&
  ln -s '$in_text' 'in_text/${re.sub("[^\w\-_]", "_", $in_text.element_identifier)}.$gxy2omsext($in_text.ext)' &&
#end if
#if $in_oligo_params:
  mkdir in_oligo_params &&
  ln -s '$in_oligo_params' 'in_oligo_params/${re.sub("[^\w\-_]", "_", $in_oligo_params.element_identifier)}.$gxy2omsext($in_oligo_params.ext)' &&
#end if
#if $in_oligo_trainset:
  mkdir in_oligo_trainset &&
  ln -s '$in_oligo_trainset' 'in_oligo_trainset/${re.sub("[^\w\-_]", "_", $in_oligo_trainset.element_identifier)}.$gxy2omsext($in_oligo_trainset.ext)' &&
#end if
mkdir svm_model &&
ln -s '$svm_model' 'svm_model/${re.sub("[^\w\-_]", "_", $svm_model.element_identifier)}.$gxy2omsext($svm_model.ext)' &&
#if $out_id.file_FLAG:
  mkdir out_id_file &&
#end if
#if $out_id.positive_FLAG:
  mkdir out_id_positive &&
#end if
#if $out_id.negative_FLAG:
  mkdir out_id_negative &&
#end if
#if $out_text.file_FLAG:
  mkdir out_text_file &&
#end if

## Main program call

set -o pipefail &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' '$hardcoded_json' &&
echo ARGS && cat '$args_json' &&
echo HARD && cat '$hardcoded_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
#if $in_id:
  -in_id
  'in_id/${re.sub("[^\w\-_]", "_", $in_id.element_identifier)}.$gxy2omsext($in_id.ext)'
#end if
#if $in_text:
  -in_text
  'in_text/${re.sub("[^\w\-_]", "_", $in_text.element_identifier)}.$gxy2omsext($in_text.ext)'
#end if
#if $in_oligo_params:
  -in_oligo_params
  'in_oligo_params/${re.sub("[^\w\-_]", "_", $in_oligo_params.element_identifier)}.$gxy2omsext($in_oligo_params.ext)'
#end if
#if $in_oligo_trainset:
  -in_oligo_trainset
  'in_oligo_trainset/${re.sub("[^\w\-_]", "_", $in_oligo_trainset.element_identifier)}.$gxy2omsext($in_oligo_trainset.ext)'
#end if
-svm_model
'svm_model/${re.sub("[^\w\-_]", "_", $svm_model.element_identifier)}.$gxy2omsext($svm_model.ext)'
#if $out_id.file_FLAG:
  -out_id:file
  'out_id_file/output.${gxy2omsext("idxml")}'
#end if
#if $out_id.positive_FLAG:
  -out_id:positive
  'out_id_positive/output.${gxy2omsext("idxml")}'
#end if
#if $out_id.negative_FLAG:
  -out_id:negative
  'out_id_negative/output.${gxy2omsext("idxml")}'
#end if
#if $out_text.file_FLAG:
  -out_text:file
  'out_text_file/output.${gxy2omsext("csv")}'
#end if
#if not($out_id.file_FLAG) and not($out_id.positive_FLAG) and not($out_id.negative_FLAG) and not($out_text.file_FLAG):
  | tee '$stdout'
#end if

## Postprocessing
#if $out_id.file_FLAG:
  && mv 'out_id_file/output.${gxy2omsext("idxml")}' '$out_id_file'
#end if
#if $out_id.positive_FLAG:
  && mv 'out_id_positive/output.${gxy2omsext("idxml")}' '$out_id_positive'
#end if
#if $out_id.negative_FLAG:
  && mv 'out_id_negative/output.${gxy2omsext("idxml")}' '$out_id_negative'
#end if
#if $out_text.file_FLAG:
  && mv 'out_text_file/output.${gxy2omsext("csv")}' '$out_text_file'
#end if
#if $adv_opts_cond.adv_opts_selector=='advanced' and $adv_opts_cond.ctd_out_FLAG
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
    <configfile name="hardcoded_json"><![CDATA[{"log": "log.txt", "debug": "3", "threads": "\${GALAXY_SLOTS:-1}", "no_progress": true}]]></configfile>
  </configfiles>
  <inputs>
    <param name="in_id" argument="-in_id" type="data" format="idxml" optional="true" label="Peptides with precursor information" help=" select idxml data sets(s)"/>
    <param name="in_text" argument="-in_text" type="data" format="txt" optional="true" label="Peptides as text-based file" help=" select txt data sets(s)"/>
    <param name="in_oligo_params" argument="-in_oligo_params" type="data" format="paramxml" optional="true" label="input file with additional model parameters when using the OLIGO kernel" help=" select paramxml data sets(s)"/>
    <param name="in_oligo_trainset" argument="-in_oligo_trainset" type="data" format="txt" optional="true" label="input file with the used training dataset when using the OLIGO kernel" help=" select txt data sets(s)"/>
    <param name="svm_model" argument="-svm_model" type="data" format="txt" optional="false" label="svm model in libsvm format (can be produced by RTModel)" help=" select txt data sets(s)"/>
    <param name="total_gradient_time" argument="-total_gradient_time" type="float" optional="true" min="1e-05" value="1.0" label="The time (in seconds) of the gradient (peptide RT prediction)" help=""/>
    <section name="out_id" title="Output files in idXML format" help="" expanded="false">
      <param type="boolean" name="file_FLAG" checked="false" truevalue="true" falsevalue="false" label="Generate output file (Output file with peptide RT prediction)" help=""/>
      <param type="boolean" name="positive_FLAG" checked="false" truevalue="true" falsevalue="false" label="Generate output positive (Output file in idXML format containing positive predictions for peptide separation prediction - requires 'out_id:negative' to be present as well)" help=""/>
      <param type="boolean" name="negative_FLAG" checked="false" truevalue="true" falsevalue="false" label="Generate output negative (Output file in idXML format containing negative predictions for peptide separation prediction - requires 'out_id:positive' to be present as well)" help=""/>
      <param name="rewrite_peptideidentification_rtmz" argument="-out_id:rewrite_peptideidentification_rtmz" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Rewrites each peptideidentification's rt and mz from prediction and calculation (according to the best hit)" help=""/>
    </section>
    <section name="out_text" title="Output files in text format" help="" expanded="false">
      <param type="boolean" name="file_FLAG" checked="false" truevalue="true" falsevalue="false" label="Generate output file (Output file with predicted RT values)" help=""/>
    </section>
    <expand macro="adv_opts_macro">
      <param name="max_number_of_peptides" argument="-max_number_of_peptides" type="integer" optional="true" value="100000" label="The maximum number of peptides considered at once (bigger number will lead to faster results but needs more memory)" help=""/>
      <param name="force" argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overwrite tool specific checks" help=""/>
      <param name="test" argument="-test" type="hidden" optional="true" value="False" label="Enables the test mode (needed for internal use only)" help="">
        <expand macro="list_string_san"/>
      </param>
      <param name="ctd_out_FLAG" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Output used ctd (ini) configuration file"/>
    </expand>
  </inputs>
  <outputs>
    <data name="out_id_file" label="${tool.name} on ${on_string}: out_id:file" format="idxml">
      <filter>out_id["file_FLAG"]</filter>
    </data>
    <data name="out_id_positive" label="${tool.name} on ${on_string}: out_id:positive" format="idxml">
      <filter>out_id["positive_FLAG"]</filter>
    </data>
    <data name="out_id_negative" label="${tool.name} on ${on_string}: out_id:negative" format="idxml">
      <filter>out_id["negative_FLAG"]</filter>
    </data>
    <data name="out_text_file" label="${tool.name} on ${on_string}: out_text:file" format="csv">
      <filter>out_text["file_FLAG"]</filter>
    </data>
    <data name="stdout" format="txt" label="${tool.name} on ${on_string}: stdout">
      <filter>not (out_id["file_FLAG"]) and not (out_id["positive_FLAG"]) and not (out_id["negative_FLAG"]) and not (out_text["file_FLAG"])</filter>
    </data>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>adv_opts_cond["adv_opts_selector"]=="advanced" and adv_opts_cond["ctd_out_FLAG"]</filter>
    </data>
  </outputs>
  <tests>
    <expand macro="autotest_RTPredict"/>
    <expand macro="manutest_RTPredict"/>
  </tests>
  <help><![CDATA[Predicts retention times for peptides using a model trained by RTModel.


For more information, visit http://www.openms.de/documentation/TOPP_RTPredict.html]]></help>
  <expand macro="references"/>
</tool>
