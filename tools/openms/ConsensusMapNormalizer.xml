<?xml version='1.0' encoding='UTF-8'?>
<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [Map Alignment]-->
<tool id="ConsensusMapNormalizer" name="ConsensusMapNormalizer" version="@TOOL_VERSION@+galaxy@GALAXY_VERSION@">
  <description>Normalizes maps of one consensusXML file</description>
  <macros>
    <token name="@EXECUTABLE@">ConsensusMapNormalizer</token>
    <import>macros.xml</import>
    <import>macros_autotest.xml</import>
    <import>macros_test.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir in &&
ln -s '$in' 'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)' &&
mkdir out &&

## Main program call

set -o pipefail &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-in
'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)'
-out
'out/output.${gxy2omsext("consensusxml")}'

## Postprocessing
&& mv 'out/output.${gxy2omsext("consensusxml")}' '$out']]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
  </configfiles>
  <inputs>
    <param name="in" argument="-in" type="data" format="consensusxml" optional="false" label="input file" help=" select consensusxml data sets(s)"/>
    <param name="algorithm_type" argument="-algorithm_type" display="radio" type="select" optional="false" label="The normalization algorithm that is applied" help="'robust_regression' scales each map by a fator computed from the ratios of non-differential background features (as determined by the ratio_threshold parameter), 'quantile' performs quantile normalization, 'median' scales all maps to the same median intensity, 'median_shift' shifts the median instead of scaling (WARNING: if you have regular, log-normal MS data, 'median_shift' is probably the wrong choice. Use only if you know what you're doing!)">
      <option value="robust_regression" selected="true">robust_regression</option>
      <option value="median">median</option>
      <option value="median_shift">median_shift</option>
      <option value="quantile">quantile</option>
      <expand macro="list_string_san"/>
    </param>
    <param name="ratio_threshold" argument="-ratio_threshold" type="float" optional="true" min="0.001" max="1.0" value="0.67" label="Only for 'robust_regression': the parameter is used to distinguish between non-outliers (ratio_threshold &lt; intensity ratio &lt; 1/ratio_threshold) and outliers" help=""/>
    <param name="threads" argument="-threads" type="hidden" value="${GALAXY_SLOTS:-1}">
      <sanitizer>
        <valid initial="string.printable"/>
      </sanitizer>
    </param>
    <expand macro="adv_opts_macro">
      <param name="accession_filter" argument="-accession_filter" type="text" optional="true" value="" label="Use only features with accessions (partially) matching this regular expression for computing the normalization factors" help="Useful, e.g., if you have known house keeping proteins in your samples. When this parameter is empty or the regular expression matches the empty string, all features are used (even those without an ID). No effect if quantile normalization is used">
        <expand macro="list_string_san"/>
      </param>
      <param name="description_filter" argument="-description_filter" type="text" optional="true" value="" label="Use only features with description (partially) matching this regular expression for computing the normalization factors" help="Useful, e.g., if you have known house keeping proteins in your samples. When this parameter is empty or the regular expression matches the empty string, all features are used (even those without an ID). No effect if quantile normalization is used">
        <expand macro="list_string_san"/>
      </param>
      <param name="log" argument="-log" type="hidden" value="log.txt">
        <expand macro="list_string_san"/>
        <sanitizer>
          <valid initial="string.printable"/>
        </sanitizer>
      </param>
      <param name="no_progress" argument="-no_progress" type="hidden" value="true">
        <sanitizer>
          <valid initial="string.printable"/>
        </sanitizer>
      </param>
      <param name="force" argument="-force" type="boolean" optional="true" truevalue="true" falsevalue="false" checked="false" label="Overwrite tool specific checks" help=""/>
      <param name="test" argument="-test" type="hidden" value="false">
        <sanitizer>
          <valid initial="string.printable"/>
        </sanitizer>
      </param>
    </expand>
  </inputs>
  <outputs>
    <data name="out" label="${tool.name} on ${on_string}: out" format="consensusxml"/>
  </outputs>
  <tests>
    <expand macro="autotest_ConsensusMapNormalizer"/>
    <expand macro="manutest_ConsensusMapNormalizer"/>
  </tests>
  <help><![CDATA[Normalizes maps of one consensusXML file

]]></help>
  <expand macro="references"/>
</tool>
