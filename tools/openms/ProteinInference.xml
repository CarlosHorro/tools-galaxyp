<?xml version='1.0' encoding='UTF-8'?>
<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [Identification]-->
<tool id="ProteinInference" name="ProteinInference" version="@TOOL_VERSION@+galaxy@GALAXY_VERSION@">
  <description>Protein inference based on an aggregation of the scores of the identified peptides.</description>
  <macros>
    <token name="@EXECUTABLE@">ProteinInference</token>
    <import>macros.xml</import>
    <import>macros_autotest.xml</import>
    <import>macros_test.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir in &&
${ ' '.join(["ln -s '%s' 'in/%s.%s' &&" % (_, re.sub('[^\w\-_]', '_', _.element_identifier), $gxy2omsext(_.ext)) for _ in $in if _]) }
mkdir out &&

## Main program call

set -o pipefail &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-in
${' '.join(["'in/%s.%s'"%(re.sub('[^\w\-_]', '_', _.element_identifier), $gxy2omsext(_.ext)) for _ in $in if _])}
-out
'out/output.${gxy2omsext("idxml")}'

## Postprocessing
&& mv 'out/output.${gxy2omsext("idxml")}' '$out'
#if $adv_opts_cond.ctd_out_FLAG
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
  </configfiles>
  <inputs>
    <param name="in" argument="-in" type="data" format="idxml" multiple="true" optional="false" label="input file(s)" help=" select idxml data sets(s)"/>
    <param name="merge_runs" argument="-merge_runs" display="radio" type="select" optional="false" label="If your idXML contains multiple runs, merge them beforehand?" help="">
      <option value="no" selected="true">no</option>
      <option value="all">all</option>
      <expand macro="list_string_san"/>
    </param>
    <param name="annotate_indist_groups" argument="-annotate_indist_groups" type="boolean" truevalue="true" falsevalue="false" checked="true" label="If you want to annotate indistinguishable protein groups, either for reporting or for group based quant" help="later. Only works with a single ID run in the file"/>
    <param name="threads" argument="-threads" type="hidden" value="${GALAXY_SLOTS:-1}">
      <sanitizer>
        <valid initial="string.printable"/>
      </sanitizer>
    </param>
    <section name="Merging" title="" help="" expanded="false">
      <param name="annotate_origin" argument="-Merging:annotate_origin" type="boolean" truevalue="true" falsevalue="false" checked="true" label="If true, adds a map_index MetaValue to the PeptideIDs to annotate the IDRun they came from" help=""/>
    </section>
    <section name="Algorithm" title="" help="" expanded="false">
      <param name="min_peptides_per_protein" argument="-Algorithm:min_peptides_per_protein" type="integer" optional="true" min="0" value="1" label="Minimal number of peptides needed for a protein identification" help="If set to zero, unmatched proteins get a score of -Infinity. If bigger than zero, proteins with less peptides are filtered and evidences removed from the PSMs. PSMs that do not reference any proteins anymore are removed but the spectrum info is kept"/>
      <param name="score_aggregation_method" argument="-Algorithm:score_aggregation_method" display="radio" type="select" optional="false" label="How to aggregate scores of peptides matching to the same protein?" help="">
        <option value="maximum" selected="true">maximum</option>
        <option value="product">product</option>
        <option value="sum">sum</option>
        <expand macro="list_string_san"/>
      </param>
      <param name="treat_charge_variants_separately" argument="-Algorithm:treat_charge_variants_separately" type="text" optional="true" value="true" label="If this is set, different charge variants of the same peptide sequence count as individual evidences" help="">
        <expand macro="list_string_san"/>
      </param>
      <param name="treat_modification_variants_separately" argument="-Algorithm:treat_modification_variants_separately" type="text" optional="true" value="true" label="If this is set, different modification variants of the same peptide sequence count as individual evidences" help="">
        <expand macro="list_string_san"/>
      </param>
      <param name="use_shared_peptides" argument="-Algorithm:use_shared_peptides" type="text" optional="true" value="true" label="If this is set, shared peptides are used as evidences" help="">
        <expand macro="list_string_san"/>
      </param>
      <param name="skip_count_annotation" argument="-Algorithm:skip_count_annotation" type="text" optional="true" value="false" label="If this is true, peptide counts won't be annotated at the proteins" help="">
        <expand macro="list_string_san"/>
      </param>
    </section>
    <expand macro="adv_opts_macro">
      <param name="log" argument="-log" type="hidden" value="log.txt">
        <expand macro="list_string_san"/>
        <sanitizer>
          <valid initial="string.printable"/>
        </sanitizer>
      </param>
      <param name="no_progress" argument="-no_progress" type="hidden" value="true">
        <sanitizer>
          <valid initial="string.printable"/>
        </sanitizer>
      </param>
      <param name="force" argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overwrite tool specific checks" help=""/>
      <param name="test" argument="-test" type="hidden" value="false">
        <sanitizer>
          <valid initial="string.printable"/>
        </sanitizer>
      </param>
      <param name="ctd_out_FLAG" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Output used ctd (ini) configuration file"/>
    </expand>
  </inputs>
  <outputs>
    <data name="out" label="${tool.name} on ${on_string}: out" format="idxml"/>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>adv_opts_cond["adv_opts_selector"]=="advanced" and adv_opts_cond["ctd_out_FLAG"]</filter>
    </data>
  </outputs>
  <tests>
    <expand macro="autotest_ProteinInference"/>
    <expand macro="manutest_ProteinInference"/>
  </tests>
  <help><![CDATA[Protein inference based on an aggregation of the scores of the identified peptides.


For more information, visit http://www.openms.de/documentation/TOPP_ProteinInference.html]]></help>
  <expand macro="references"/>
</tool>
