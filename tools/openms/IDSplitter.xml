<?xml version='1.0' encoding='UTF-8'?>
<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [Utilities]-->
<tool id="IDSplitter" name="IDSplitter" version="@TOOL_VERSION@+galaxy@GALAXY_VERSION@" profile="20.05">
  <description>Splits protein/peptide identifications off of annotated data files</description>
  <macros>
    <token name="@EXECUTABLE@">IDSplitter</token>
    <import>macros.xml</import>
    <import>macros_autotest.xml</import>
    <import>macros_test.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir in &&
ln -s '$in' 'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)' &&
#if $out_FLAG:
  mkdir out &&
#end if
#if $id_out_FLAG:
  mkdir id_out &&
#end if

## Main program call

set -o pipefail &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' '$hardcoded_json' &&
echo ARGS && cat '$args_json' &&
echo HARD && cat '$hardcoded_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-in
'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)'
#if $out_FLAG:
  -out
  'out/output.${in.ext}'
#end if
#if $id_out_FLAG:
  -id_out
  'id_out/output.${gxy2omsext("idxml")}'
#end if
#if not($out_FLAG) and not($id_out_FLAG):
  | tee '$stdout'
#end if

## Postprocessing
#if $out_FLAG:
  && mv 'out/output.${in.ext}' '$out'
#end if
#if $id_out_FLAG:
  && mv 'id_out/output.${gxy2omsext("idxml")}' '$id_out'
#end if
#if $adv_opts_cond.adv_opts_selector=='advanced' and $adv_opts_cond.ctd_out_FLAG
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
    <configfile name="hardcoded_json"><![CDATA[{"log": "log.txt", "debug": "3", "threads": "\${GALAXY_SLOTS:-1}", "no_progress": true}]]></configfile>
  </configfiles>
  <inputs>
    <param name="in" argument="-in" type="data" format="consensusxml,featurexml,mzml" optional="false" label="Input file (data annotated with identifications)" help=" select consensusxml,featurexml,mzml data sets(s)"/>
    <param type="boolean" name="out_FLAG" checked="false" truevalue="true" falsevalue="false" label="Generate output out (Output file (data without identifications))" help="Either 'out' or 'id_out' are required. They can be used together"/>
    <param type="boolean" name="id_out_FLAG" checked="false" truevalue="true" falsevalue="false" label="Generate output id_out (Output file (identifications))" help="Either 'out' or 'id_out' are required. They can be used together"/>
    <expand macro="adv_opts_macro">
      <param name="force" argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overwrite tool specific checks" help=""/>
      <param name="test" argument="-test" type="hidden" optional="true" value="False" label="Enables the test mode (needed for internal use only)" help="">
        <expand macro="list_string_san"/>
      </param>
      <param name="ctd_out_FLAG" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Output used ctd (ini) configuration file"/>
    </expand>
  </inputs>
  <outputs>
    <data name="out" label="${tool.name} on ${on_string}: out" format_source="in" metadata_source="in">
      <filter>out_FLAG</filter>
    </data>
    <data name="id_out" label="${tool.name} on ${on_string}: id_out" format="idxml">
      <filter>id_out_FLAG</filter>
    </data>
    <data name="stdout" format="txt" label="${tool.name} on ${on_string}: stdout">
      <filter>not (out_FLAG) and not (id_out_FLAG)</filter>
    </data>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>adv_opts_cond["adv_opts_selector"]=="advanced" and adv_opts_cond["ctd_out_FLAG"]</filter>
    </data>
  </outputs>
  <tests>
    <expand macro="autotest_IDSplitter"/>
    <expand macro="manutest_IDSplitter"/>
  </tests>
  <help><![CDATA[Splits protein/peptide identifications off of annotated data files


For more information, visit http://www.openms.de/documentation/UTILS_IDSplitter.html]]></help>
  <expand macro="references"/>
</tool>
