<?xml version='1.0' encoding='UTF-8'?>
<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [ID Processing]-->
<tool id="IDMapper" name="IDMapper" version="@TOOL_VERSION@+galaxy@GALAXY_VERSION@">
  <description>Assigns protein/peptide identifications to features or consensus features.</description>
  <macros>
    <token name="@EXECUTABLE@">IDMapper</token>
    <import>macros.xml</import>
    <import>macros_autotest.xml</import>
    <import>macros_test.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir id &&
ln -s '$id' 'id/${re.sub("[^\w\-_]", "_", $id.element_identifier)}.$gxy2omsext($id.ext)' &&
mkdir in &&
ln -s '$in' 'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)' &&
mkdir out &&
#if $spectra.in:
  mkdir spectra.in &&
  ln -s '$spectra.in' 'spectra.in/${re.sub("[^\w\-_]", "_", $spectra.in.element_identifier)}.$gxy2omsext($spectra.in.ext)' &&
#end if

## Main program call

set -o pipefail &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-id
'id/${re.sub("[^\w\-_]", "_", $id.element_identifier)}.$gxy2omsext($id.ext)'
-in
'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)'
-out
'out/output.${in.ext}'
#if $spectra.in:
  -spectra:in
  'spectra.in/${re.sub("[^\w\-_]", "_", $spectra.in.element_identifier)}.$gxy2omsext($spectra.in.ext)'
#end if

## Postprocessing
&& mv 'out/output.${in.ext}' '$out']]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
  </configfiles>
  <inputs>
    <param name="id" argument="-id" type="data" format="idxml,mzid" optional="false" label="Protein/peptide identifications file" help=" select idxml,mzid data sets(s)"/>
    <param name="in" argument="-in" type="data" format="consensusxml,featurexml,mzq" optional="false" label="Feature map/consensus map file" help=" select consensusxml,featurexml,mzq data sets(s)"/>
    <param name="rt_tolerance" argument="-rt_tolerance" type="float" optional="true" min="0.0" value="5.0" label="RT tolerance (in seconds) for the matching of peptide identifications and (consensus) features.Tolerance is understood as 'plus or minus x', so the matching range increases by twice the given value" help=""/>
    <param name="mz_tolerance" argument="-mz_tolerance" type="float" optional="true" min="0.0" value="20.0" label="m/z tolerance (in ppm or Da) for the matching of peptide identifications and (consensus) features.Tolerance is understood as 'plus or minus x', so the matching range increases by twice the given value" help=""/>
    <param name="mz_measure" argument="-mz_measure" display="radio" type="select" optional="false" label="Unit of 'mz_tolerance'" help="">
      <option value="ppm" selected="true">ppm</option>
      <option value="Da">Da</option>
      <expand macro="list_string_san"/>
    </param>
    <param name="mz_reference" argument="-mz_reference" display="radio" type="select" optional="false" label="Source of m/z values for peptide identifications" help="If 'precursor', the precursor-m/z from the idXML is used. If 'peptide',masses are computed from the sequences of peptide hits; in this case, an identification matches if any of its hits matches.('peptide' should be used together with 'feature:use_centroid_mz' to avoid false-positive matches.)">
      <option value="precursor">precursor</option>
      <option value="peptide" selected="true">peptide</option>
      <expand macro="list_string_san"/>
    </param>
    <param name="threads" argument="-threads" type="hidden" value="${GALAXY_SLOTS:-1}">
      <sanitizer>
        <valid initial="string.printable"/>
      </sanitizer>
    </param>
    <section name="feature" title="Additional options for featureXML input" help="" expanded="false">
      <param name="use_centroid_rt" argument="-feature:use_centroid_rt" type="boolean" optional="true" truevalue="true" falsevalue="false" checked="false" label="Use the RT coordinates of the feature centroids for matching, instead of the RT ranges of the features/mass traces" help=""/>
      <param name="use_centroid_mz" argument="-feature:use_centroid_mz" type="boolean" optional="true" truevalue="true" falsevalue="false" checked="true" label="Use the m/z coordinates of the feature centroids for matching, instead of the m/z ranges of the features/mass traces.(If you choose 'peptide' as 'mz_reference', you should usually set this flag to avoid false-positive matches.)" help=""/>
    </section>
    <section name="consensus" title="Additional options for consensusXML input" help="" expanded="false">
      <param name="use_subelements" argument="-consensus:use_subelements" type="boolean" optional="true" truevalue="true" falsevalue="false" checked="false" label="Match using RT and m/z of sub-features instead of consensus RT and m/z" help="A consensus feature matches if any of its sub-features matches"/>
      <param name="annotate_ids_with_subelements" argument="-consensus:annotate_ids_with_subelements" type="boolean" optional="true" truevalue="true" falsevalue="false" checked="false" label="Store the map index of the sub-feature in the peptide ID" help=""/>
    </section>
    <section name="spectra" title="Additional options for mzML input" help="" expanded="false">
      <param name="in" argument="-spectra:in" type="data" format="mzml" optional="true" label="MS run used to annotated unidentified spectra to features or consensus features" help=" select mzml data sets(s)"/>
    </section>
    <expand macro="adv_opts_macro">
      <param name="ignore_charge" argument="-ignore_charge" type="boolean" optional="true" truevalue="true" falsevalue="false" checked="false" label="For feature/consensus maps: Assign an ID independently of whether its charge state matches that of the (consensus) feature" help=""/>
      <param name="log" argument="-log" type="hidden" value="log.txt">
        <expand macro="list_string_san"/>
        <sanitizer>
          <valid initial="string.printable"/>
        </sanitizer>
      </param>
      <param name="no_progress" argument="-no_progress" type="hidden" value="true">
        <sanitizer>
          <valid initial="string.printable"/>
        </sanitizer>
      </param>
      <param name="force" argument="-force" type="boolean" optional="true" truevalue="true" falsevalue="false" checked="false" label="Overwrite tool specific checks" help=""/>
      <param name="test" argument="-test" type="hidden" value="false">
        <sanitizer>
          <valid initial="string.printable"/>
        </sanitizer>
      </param>
    </expand>
  </inputs>
  <outputs>
    <data name="out" label="${tool.name} on ${on_string}: out" format_source="in" metadata_source="in"/>
  </outputs>
  <tests>
    <expand macro="autotest_IDMapper"/>
    <expand macro="manutest_IDMapper"/>
  </tests>
  <help><![CDATA[Assigns protein/peptide identifications to features or consensus features.

]]></help>
  <expand macro="references"/>
</tool>
