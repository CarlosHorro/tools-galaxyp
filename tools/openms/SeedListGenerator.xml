<?xml version='1.0' encoding='UTF-8'?>
<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [Quantitation]-->
<tool id="SeedListGenerator" name="SeedListGenerator" version="@TOOL_VERSION@+galaxy@GALAXY_VERSION@">
  <description>Generates seed lists for feature detection.</description>
  <macros>
    <token name="@EXECUTABLE@">SeedListGenerator</token>
    <import>macros.xml</import>
    <import>macros_autotest.xml</import>
    <import>macros_test.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir in &&
ln -s '$in' 'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)' &&
mkdir out &&

## Main program call

set -o pipefail &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-in
'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)'
-out
${' '.join(["'out/%s.%s'"%(re.sub('[^\w\-_]', '_', _.element_identifier), $gxy2omsext("featurexml")) for _ in $in if _])}

## Postprocessing
${' '.join(["&& mv -n 'in/%(id)s.%(gext)s' 'out/%(id)s'"%{"id": re.sub('[^\w\-_]', '_', _.element_identifier), "gext": $gxy2omsext("featurexml")} for _ in $out if _])}
#if $adv_opts_cond.ctd_out_FLAG
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
  </configfiles>
  <inputs>
    <param name="in" argument="-in" type="data" format="consensusxml,featurexml,idxml,mzml" optional="false" label="Input file (see below for details)" help=" select consensusxml,featurexml,idxml,mzml data sets(s)"/>
    <param name="use_peptide_mass" argument="-use_peptide_mass" type="boolean" truevalue="true" falsevalue="false" checked="false" label="[idXML input only] Use the monoisotopic mass of the best peptide hit for the m/z position (default: use precursor m/z)" help=""/>
    <param name="threads" argument="-threads" type="hidden" value="${GALAXY_SLOTS:-1}">
      <sanitizer>
        <valid initial="string.printable"/>
      </sanitizer>
    </param>
    <expand macro="adv_opts_macro">
      <param name="log" argument="-log" type="hidden" value="log.txt">
        <expand macro="list_string_san"/>
        <sanitizer>
          <valid initial="string.printable"/>
        </sanitizer>
      </param>
      <param name="no_progress" argument="-no_progress" type="hidden" value="true">
        <sanitizer>
          <valid initial="string.printable"/>
        </sanitizer>
      </param>
      <param name="force" argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overwrite tool specific checks" help=""/>
      <param name="test" argument="-test" type="hidden" value="false">
        <sanitizer>
          <valid initial="string.printable"/>
        </sanitizer>
      </param>
      <param name="ctd_out_FLAG" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Output used ctd (ini) configuration file"/>
    </expand>
  </inputs>
  <outputs>
    <collection type="list" name="out" label="${tool.name} on ${on_string}: out">
      <discover_datasets directory="out" format="featurexml" pattern="__name__"/>
    </collection>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>adv_opts_cond["adv_opts_selector"]=="advanced" and adv_opts_cond["ctd_out_FLAG"]</filter>
    </data>
  </outputs>
  <tests>
    <expand macro="autotest_SeedListGenerator"/>
    <expand macro="manutest_SeedListGenerator"/>
  </tests>
  <help><![CDATA[Generates seed lists for feature detection.


For more information, visit http://www.openms.de/documentation/TOPP_SeedListGenerator.html]]></help>
  <expand macro="references"/>
</tool>
