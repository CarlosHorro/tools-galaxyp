<tool id="msstatstmt" name="MSstatsTMT" version="@VERSION@.0">
    <description>protein significance analysis in shotgun mass spectrometry-based proteomic experiments with tandem mass tag (TMT) labeling</description>
    <macros>
        <token name="@VERSION@">1.8.2</token>
    </macros>
    <requirements>
        <requirement type="package" version="@VERSION@">bioconductor-msstatstmt</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        cat '$msstatstmt_script' > '$out_r_script' &&
        Rscript '$msstatstmt_script'
        && cat msstats*.log > '$out_msstats_log'
        && cat msstatstmt.log > '$out_msstatstmt_log'
    ]]></command>
    <configfiles>
        <configfile name="msstatstmt_script"><![CDATA[
library('MSstatsTMT', warn.conflicts = F, quietly = T, verbose = F)

#if $input.input_src == 'MaxQuant'
    proteinGroups.mq <- read.table("$input.proteinGroups", sep="\t", header=TRUE)
    evidence.mq <- read.table("$input.evidence", sep="\t", header=TRUE)

    #if $input.annotation.is_of_type('csv')
        annotation.mq <- read.csv("$input.annotation", header=TRUE)
    #else
        annotation.mq <- read.table("$input.annotation", sep="\t", header=TRUE)
    #end if

    input <- MaxQtoMSstatsTMTFormat(evidence = evidence.mq,
                                    proteinGroups = proteinGroups.mq,
                                    annotation = annotation.mq,
                                    which.proteinid = "$input.proteinID",
                                    rmProt_Only.identified.by.site = $input.input_options.rmProt_Onlyidentifiedbysite,
                                    useUniquePeptide = $input.input_options.useUniquePeptide,
                                    rmPSM_withMissing_withinRun = $input.input_options.rmPSM_withMissing_withinRun,
                                    rmPSM_withfewMea_withinRun = $input.input_options.rmPSM_withfewMea_withinRun,
                                    rmProtein_with1Feature = $input.input_options.rmProtein_with1Feature,
                                    summaryforMultipleRows = $input.input_options.summaryforMultipleRows)

    quant <- proteinSummarization(input,
                                  method = "$proteinSummarization.method",
                                  global_norm = $proteinSummarization.global_norm,
                                  reference_norm = $proteinSummarization.reference_norm,
                                  remove_norm_channel = $proteinSummarization.remove_norm_channel,
                                  remove_empty_channel = $proteinSummarization.remove_empty_channel,
                                  MBimpute = $proteinSummarization.MBimpute,
                                  #if $proteinSummarization.maxQuantileforCensored.select == 'false'
                                  maxQuantileforCensored = NULL)
                                  #else
                                  maxQuantileforCensored = $proteinSummarization.maxQuantileforCensored.value)
                                  #end if
#end if

#for $plot_type in $selected_outputs
    #if $plot_type[-4:] == "Plot"
        dataProcessPlotsTMT(input,
                            quant,
                            type = '$plot_type',
                            ylimUp = $out_plots_opt.ylimUp,
                            ylimDown = $out_plots_opt.ylimDown,
                            x.axis.size = $out_plots_opt.x_axis_size,
                            y.axis.size = $out_plots_opt.y_axis_size,
                            text.size = $out_plots_opt.text_size,
                            text.angle = $out_plots_opt.text_angle,
                            legend.size = $out_plots_opt.legend_size,
                            dot.size.profile = $out_plots_opt.dot_size_profile,
                            ncol.guide = $out_plots_opt.ncol_guide,
                            width = $out_plots_opt.width,
                            height = $out_plots_opt.height,
                            #if $out_plots_opt.which_Protein.select != 'list'
                            which.Protein = "$out_plots_opt.which_Protein.select",
                            #else
                            which.Protein = unlist(read.table("$out_plots_opt.which_Protein.protein_list", sep = "\n", header = FALSE), use.names = FALSE),
                            #end if
                            originalPlot = $out_plots_opt.originalPlot,
                            summaryPlot = $out_plots_opt.summaryPlot,
                            address = "")
    #end if
#end for

#if $group.group_comparison == 'true'
    #if $group.use_comp_matrix.select == 'true'
        #if $group.use_comp_matrix.comparison_matrix.is_of_type('csv')
            comp_matrix <- read.csv("$group.use_comp_matrix.comparison_matrix", header=TRUE, check.names=FALSE)
        #else
            comp_matrix <- read.table("$group.use_comp_matrix.comparison_matrix", sep="\t", header=TRUE, check.names=FALSE)
        #end if

        comparison <- comp_matrix[,-1]
        row.names(comparison) <- as.character(comp_matrix[,1])
        comparison <- as.matrix(comparison[levels(quant\$Condition)])
    #end if

    comparisons <- groupComparisonTMT(data = quant,
                                      #if $group.use_comp_matrix.select == 'true'
                                      contrast.matrix = comparison,
                                      #end if
                                      moderated = $group.moderated,
                                      adj.method = "$group.adj_method",
                                      remove_norm_channel = $group.remove_norm_channel,
                                      remove_empty_channel = $group.remove_empty_channel)

    write.table(comparisons,
                "ComparisonResult.tsv",
                sep = "\t",
                quote = F,
                row.names = F,
                dec = ".")
#end if
        ]]></configfile>
    </configfiles>
    <inputs>
        <conditional name="input">
            <param name="input_src" type="select" label="Input Source">
                <option value="MaxQuant">MaxQuant</option>
            </param>
            <when value="MaxQuant">
                <param name="evidence" type="data" format="tabular,csv" label="evidence.txt - feature-level data"/>
                <param name="annotation" type="data" format="tabular,csv" label="annotation.txt data which includes Raw.file, Condition, BioReplicate, Run, IsotopeLabelType information" />
                <param name="proteinGroups" type="data" format="tabular,csv" label="proteinGroups.txt" help="It needs to matching protein group ID. If proteinGroups=NULL, use 'Proteins' column in 'evidence.txt'"/>
                <param name="proteinID" type="select" label="Select Protein ID in evidence.txt">
                    <option value="Proteins">Protein column</option>
                    <option value="Leading.razor.protein">Leading razor protein column</option>
                </param>
                <section name="input_options" title="MaxQtoMSstatsTMTFormat Options" expanded="false">
                    <param name="rmProt_Onlyidentifiedbysite" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="false" label="rmProt_Onlyidentifiedbysite" help="TRUE will remove proteins with ’+’ in ’Only.identified.by.site’ column from proteinGroups.txt, which was identified only by a modification site. FALSE is the default." />
                    <param name="useUniquePeptide" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="true" label="useUniquePeptide" help="TRUE(default) removes peptides that are assigned for more than one proteins. We assume to use unique peptide for each protein." />
                    <param name="rmPSM_withMissing_withinRun" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="false" label="rmPSM_withMissing_withinRun" help="TRUE will remove PSM with any missing value within each Run. Default is FALSE." />
                    <param name="rmPSM_withfewMea_withinRun" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="true" label="rmPSM_withfewMea_withinRun" help="only for rmPSM_withMissing_withinRun = FALSE. TRUE(default) will remove the features that have 1 or 2 measurements within each Run." />
                    <param name="rmProtein_with1Feature" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="false" label="rmProtein_with1Feature" help="TRUE will remove the proteins which have only 1 peptide and charge.  Defautis FALSE." />
                    <param name="summaryforMultipleRows" type="select" label="Summary for MultipleRows" help="sum(default) or max - when there are multiple measurements for certain feature in certain run, select the feature with the largest summation or maximal value.">
                        <option value="max">max</option>
                        <option value="sum" selected="true">sum</option>
                    </param>
                </section>
            </when>
        </conditional>
        <section name="proteinSummarization" title="proteinSummarization" expanded="false">
                <param name="method" type="select" multiple="false" label="Select method">
                    <option value="msstats" selected="true">msstats</option>
                    <option value="MedianPolish">MedianPolish</option>
                    <option value="Median">Median</option>
                    <option value="LogSum">LogSum</option>
                </param>
                <param name="global_norm" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="true" label="Global median normalization" help="Global median normalization on peptide level data (equalizing the medians across all the channels and MS runs). Default is TRUE. It will be performed before protein-level summarization."/>
                <param name="reference_norm" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="true" label="Reference channel based normalization" help="Reference channel based normalization between MS runs on protein level data. TRUE(default) needs at least one reference channel in each MS run, annotated by ’Norm’ in Condition column. It will be performed after protein-level summarization. FALSE will not perform this normalization step. If data only has one run, then reference_norm=FALSE."/>
                <param name="remove_norm_channel" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="true" label="remove_norm_channel" help="TRUE(default) removes ’Norm’ channels from protein level data."/>
                <param name="remove_empty_channel" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="true" label="remove_empty_channel" help="TRUE(default) removes ’Empty’ channels from protein level data."/>
                <param name="MBimpute" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="true" label="MBimpute" help="only for method=msstats. TRUE (default) imputes missing values by Accelated failure model. FALSE uses minimum value to impute the missing value for each peptide precursor ion."/>
                <conditional name="maxQuantileforCensored">
                    <param name="select" type="select" label="maxQuantileforCensored">
                        <option value="false">No</option>
                        <option value="true">Yes</option>
                    </param>
                    <when value="false"/>
                    <when value="true">
                        <param name="value" type="float" min="0" max="0.999" value="0" label="maxQuantileforCensored" help="We assume missing values are censored. maxQuantileforCensored is Maximum quantile for deciding censored missing value, for instance, 0.999. Default is Null."/>
                    </when>
                </conditional>
        </section>
        <conditional name="group">
            <param name="group_comparison" type="select" label="Compare Groups">
                <option value="false">No</option>
                <option value="true">Yes</option>
            </param>
            <when value="false"/>
            <when value="true">
                <conditional name="use_comp_matrix">
                    <param name="select" type="select" label="Use comparison matrix?">
                        <option value="false">No</option>
                        <option value="true">Yes</option>
                    </param>
                    <when value="false"/>
                    <when value="true">
                        <param name="comparison_matrix" type="data" format="tabular,csv" label="Comparison Matrix"/>
                    </when>
                </conditional>
                <param name="moderated" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="false" label="Moderate t statistic" help="FALSE (default) uses ordinary t statistic"/>
                <param name="adj_method" type="select" label="Adjusted p value method for multiple comparison">
                    <option value="holm">holm</option>
                    <option value="hochberg">hochberg</option>
                    <option value="hommel">hommel</option>
                    <option value="bonferroni">bonferroni</option>
                    <option value="BH" selected="true">BH</option>
                    <option value="BY">BY</option>
                    <option value="fdr">fdr</option>
                    <option value="none">none</option>
                </param>
                <param name="remove_norm_channel" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="true" label="Remove ’Norm’ channels from protein level data"/>
                <param name="remove_empty_channel" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="true" label="Remove ’Empty’ channels from protein level data"/>
            </when>
        </conditional>
        <param name="selected_outputs" type="select" multiple="true" optional="false" label="Select Outputs">
            <option value="msstats_log" selected="true">MSstats log</option>
            <option value="msstatstmt_log" selected="true">MSstatsTMT log</option>
            <option value="r_script" selected="false">MSstats Rscript</option>
            <option value="ProfilePlot" selected="false">Profile Plot</option>
            <option value="QCPlot" selected="false">QC Plot</option>
        </param>
        <section name="out_plots_opt" title="Plot Output Options" expanded="false">
            <param name="ylimUp" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="false" label="Upper limit for y-axis in the log scale" help="FALSE(Default) for Profile Plot and QC Plot uses the upper limit as rounded off maximum of log2(intensities) after normalization + 3.."/>
            <param name="ylimDown" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="false" label="Lower limit for y-axis in the log scale" help="FALSE(Default) for Profile Plot and QCPlot uses 0.."/>
            <param name="x_axis_size" type="integer" min="1" value="10" label="Size of x-axis labeling"/>
            <param name="y_axis_size" type="integer" min="1" value="10" label="Size of y-axis labeling"/>
            <param name="text_size" type="integer" min="1" value="4" label="Size of labels represented each condition at the top"/>
            <param name="text_angle" type="integer" min="0" max="360" value="90" label="Angle of labels represented each condition at the top"/>
            <param name="legend_size" type="integer" min="1" value="7" label="Size of legend above Profile plot"/>
            <param name="dot_size_profile" type="integer" min="1" value="2" label="Size of dots in Profile plot"/>
            <param name="ncol_guide" type="integer" min="1" value="5" label="Number of columns for legends at the top of plot"/>
            <param name="width" type="integer" min="1" value="10" label="Width of the saved pdf file"/>
            <param name="height" type="integer" min="1" value="10" label="Height of the saved pdf file"/>
            <conditional name="which_Protein">
                <param name="select" type="select" label="Select protein IDs to draw plots">
                    <option value="all" selected="true">generate all plots for each protein</option>
                    <option value="allonly">Option for QC plot: "allonly" will generate one QC plot with all proteins</option>
                    <option value="list">Protein IDs as tabular input</option>
                </param>
                <when value="all"/>
                <when value="allonly"/>
                <when value="list">
                    <param name="protein_list" type="data" format="tabular" label="List of proteins"/>
                </when>
            </conditional>
            <param name="originalPlot" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="true" label="Draw original profile plots without normalization"/>
            <param name="summaryPlot" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="true" label="Draw profile plots with protein summarization for each channel and MS run"/>
        </section>
    </inputs>
    <outputs>
        <data name="out_msstats_log" format="txt" label="${tool.name} on ${on_string}: MSstats log">
            <filter>'msstats_log' in selected_outputs</filter>
        </data>
        <data name="out_msstatstmt_log" format="txt" label="${tool.name} on ${on_string}: MSstatsTMT log">
            <filter>'msstatstmt_log' in selected_outputs</filter>
        </data>
        <data name="out_r_script" format="txt" label="${tool.name} on ${on_string}: Rscript">
            <filter>'r_script' in selected_outputs</filter>
        </data>
        <data name="out_profile_plot" from_work_dir="ProfilePlot.pdf" format="pdf" label="${tool.name} on ${on_string}: Profile Plot">
            <filter>'ProfilePlot' in selected_outputs</filter>
        </data>
        <data name="out_qc_plot" from_work_dir="QCPlot.pdf" format="pdf" label="${tool.name} on ${on_string}: QC Plot">
            <filter>'QCPlot' in selected_outputs</filter>
        </data>
        <data name="out_group_comp" from_work_dir="ComparisonResult.tsv" format="tsv" label="${tool.name} on ${on_string}: Group Comparison">
            <filter>group['group_comparison'] == 'true'</filter>
        </data>
    </outputs>
    <tests>
    </tests>
    <help><![CDATA[
    ]]></help>
    <citations>
        <citation type="doi">10.1074/mcp.ra120.002105</citation>
    </citations>
</tool>