<tool id="peptide_shaker" name="Peptide Shaker" version="@PEPTIDESHAKER_VERSION@.3">
    <description>
        Perform protein identification using various search engines based on results from SearchGUI
    </description>
    <macros>
        <import>macros_basic.xml</import>
    </macros>
    <requirements>
        <requirement type="package" version="@PEPTIDESHAKER_VERSION@">peptide-shaker</requirement>
    </requirements>
    <expand macro="stdio" />

    <command><![CDATA[
    ## When supporting more advanced Galaxy versions:    command use_shared_home="false"
        #from datetime import datetime
        #set $exp_str = "Galaxy_Experiment_%s" % datetime.now().strftime("%Y%m%d%H%M%s")
        #set $samp_str = "Sample_%s" % datetime.now().strftime("%Y%m%d%H%M%s")
        #set $temp_stderr = "peptideshaker_stderr"
        #set $bin_dir = "bin"

        mkdir output_reports &&
        cwd=`pwd` &&
        export HOME=\$cwd &&

        echo "" > $temp_stderr &&

        ## copy the input .fasta file to the working folder
        cp '${input_fasta_file}' './input_fasta_file.fasta';

        ln -s '$searchgui_input' searchgui_input.zip &&
        jar xvf searchgui_input.zip SEARCHGUI_IdentificationParameters.par &&
        #if str($exporting_options.output_reports) != "None"
            #set $output_reports_list = set(str($exporting_options.output_reports).split(','))
        #else
            #set $output_reports_list = set()
	      #end if
        ######################
        ## PeptideShakerCLI ##
        ######################
        (peptide-shaker -Djava.awt.headless=true eu.isas.peptideshaker.cmd.PeptideShakerCLI
            --exec_dir="\$cwd/${bin_dir}"
            -gui 0
            -temp_folder \$cwd/PeptideShakerCLI
            -reference '$exp_str'
            -fasta_file './input_fasta_file.fasta'
            -identification_files \$cwd/searchgui_input.zip
            -id_params \$cwd/SEARCHGUI_IdentificationParameters.par
            -out \$cwd/peptideshaker_output.cpsx
	      #if $exporting_options.zip_conditional.zip_output_boolean == 'zip':
            -zip \$cwd/peptideshaker_output.zip
	      #end if
            -threads "\${GALAXY_SLOTS:-12}"

        ##################################
        ## mzidCLI options ##
        ##################################

        #if $exporting_options.mzidentml_conditional.mzidentml_creation == 1:
            -output_file \$cwd/output.mzid
            -include_sequences ${exporting_options.mzidentml_conditional.include_sequences}
            #if $contact_options.contact_options_selector == "yes":
                -contact_first_name "$contact_options.contact_first_name"
                -contact_last_name "$contact_options.contact_last_name"
                -contact_email "$contact_options.contact_email"
                -contact_address "$contact_options.contact_address"
                #if str($contact_options.contact_url).strip() != '':
                    -contact_url = "$contact_options.contact_url"
                #end if
                -organization_name "$contact_options.organization_name"
                -organization_email "$contact_options.organization_email"
                -organization_address "$contact_options.organization_address"
                #if str($contact_options.organization_url).strip() != '':
                    -organization_url = "$contact_options.organization_url"
                #end if
            #else:
                -contact_first_name "Proteomics"
                -contact_last_name "Galaxy"
                -contact_email "galaxyp@umn.edu"
                -contact_address "galaxyp@umn.edu"
                -organization_name "University of Minnesota"
                -organization_email "galaxyp@umn.edu"
                -organization_address "Minneapolis, MN 55455, Vereinigte Staaten"
            #end if
        #end if

        ####################################################################
        ##    PeptideShaker Identification Features Reports options       ##
        ####################################################################
        ## Generate Reports if the user has selected one of the 11 additional reports
        #if len($output_reports_list) > 0
                -out_reports \$cwd/output_reports
                -reports #echo ','.join($output_reports_list)#
        #end if

        ####################################################
        ##    PeptideShaker Follow-Up Analysis options    ##
        ####################################################

        #if $exporting_options.followup_conditional.followup_conditional_selector == "yes"
            #if $exporting_options.followup_conditional.followup_export_accession_numbers != "off"
                -accessions_file \$cwd/output_reports/proteins_accession_numbers.txt -accessions_type $exporting_options.followup_conditional.followup_export_accession_numbers
            #end if
            #if $exporting_options.followup_conditional.followup_export_sequences != "off"
                -sequences_file \$cwd/output_reports/proteins_sequences.fasta -sequences_type $exporting_options.followup_conditional.followup_export_sequences
            #end if
            #if $exporting_options.followup_conditional.followup_export_proteoforms != "off"
                -proteoforms_file \$cwd/output_reports/proteins_proteoforms.txt
            #end if
        #end if

        2>> $temp_stderr)

        ## If the user chose to zip the results but also export reports out of the zip, we have to unzip them
        #if $exporting_options.zip_conditional.zip_output_boolean == 'zip' and $exporting_options.zip_conditional.export_reports_when_zip:
            && unzip \$cwd/peptideshaker_output.zip 'reports/*' -d \$cwd
            && mv reports/* output_reports
            && rm -r reports
        #end if

        ## Renaming identification features reports to findable names and moving them to the root folder
	      #if len(output_reports_list)>0:
            #if '0' in $output_reports_list:
                && find \$cwd/output_reports -name '*Certificate_of_Analysis.txt' -exec bash -c 'mv "$0" "certificate.txt"' {} \;
            #end if
            #if '1' in $output_reports_list:
                && find \$cwd/output_reports -name '*Default_Hierarchical_Report.txt' -exec bash -c 'mv "$0" "hierarchical.txt"' {} \;
            #end if
            #if '2' in $output_reports_list:
                && find \$cwd/output_reports -name '*Default_PSM_Phosphorylation_Report.txt' -exec bash -c 'mv "$0" "psm_phospho.txt"' {} \;
            #end if`
            #if '3' in $output_reports_list:
                && find \$cwd/output_reports -name '*Default_PSM_Report.txt' -exec bash -c 'mv "$0" "psm.txt"' {} \;
            #end if
            #if '4' in $output_reports_list:
                && find \$cwd/output_reports -name '*Default_PSM_Report_with_non-validated_matches.txt' -exec bash -c 'mv "$0" "psm_nonvalidated.txt"' {} \;
            #end if
            #if '5' in $output_reports_list:
                && find \$cwd/output_reports -name '*Default_Peptide_Phosphorylation_Report.txt' -exec bash -c 'mv "$0" "peptides_phospho.txt"' {} \;
            #end if
            #if '6' in $output_reports_list:
                && find \$cwd/output_reports -name '*Default_Peptide_Report.txt' -exec bash -c 'mv "$0" "peptides.txt"' {} \;
            #end if
            #if '7' in $output_reports_list:
                && find \$cwd/output_reports -name '*Default_Peptide_Report_with_non-validated_matches.txt' -exec bash -c 'mv "$0" "peptides_nonvalidated.txt"' {} \;
            #end if
            #if '8' in $output_reports_list:
                && find \$cwd/output_reports -name '*Default_Protein_Phosphorylation_Report.txt' -exec bash -c 'mv "$0" "proteins_phospho.txt"' {} \;
            #end if
            #if '9' in $output_reports_list:
                && find \$cwd/output_reports -name '*Default_Protein_Report.txt' -exec bash -c 'mv "$0" "proteins.txt"' {} \;
            #end if
            #if '10' in $output_reports_list:
                && find \$cwd/output_reports -name '*Default_Protein_Report_with_non-validated_matches.txt' -exec bash -c 'mv "$0" "proteins_nonvalidated.txt"' {} \;
            #end if
            #if '11' in $output_reports_list:
                && find \$cwd/output_reports -name '*Extended_PSM_Report.txt' -exec bash -c 'mv "$0" "psmx.txt"' {} \;
            #end if
        #end if

        ## Moving followup analysis to the root folder
        #if $exporting_options.followup_conditional.followup_export_accession_numbers != "off"
            && mv \$cwd/output_reports/proteins_accession_numbers.txt \$cwd/proteins_accession_numbers.txt
        #end if
        #if $exporting_options.followup_conditional.followup_export_sequences != "off"
            && mv \$cwd/output_reports/proteins_sequences.fasta \$cwd/proteins_sequences.fasta
        #end if
        #if $exporting_options.followup_conditional.followup_export_proteoforms != "off"
            && mv \$cwd/output_reports/proteins_proteoforms.txt \$cwd/proteins_proteoforms.txt
        #end if

        && cat $temp_stderr 2>&1;
]]>
    </command>
    <inputs>
        <param name="searchgui_input" format="searchgui_archive" type="data" label="Compressed SearchGUI results"
            help="SearchGUI Results from History">
            <options options_filter_attribute="metadata.searchgui_major_version" >
                <filter type="add_value" value="@SEARCHGUI_MAJOR_VERSION@" />
            </options>
        </param>

        <param format="fasta" name="input_fasta_file" type="data" label="Fasta file"/>

        <conditional name="contact_options">
            <param name="contact_options_selector" type="select" label="Specify Contact Information for mzIdendML"
                help="Create a Galaxy workflow to save these values">
                <option value="no" selected="True">GalaxyP Project contact (Not suitable for PRIDE submission)</option>
                <option value="yes">Specify Contact Information</option>
            </param>
            <when value="no" />
            <when value="yes">
                <param name="contact_first_name" type="text" value="" label="Contact first name.">
                    <validator type="regex" message="">\S+.*</validator>
                </param>
                <param name="contact_last_name" type="text" value="" label="Contact last name.">
                    <validator type="regex" message="">\S+.*</validator>
                </param>
                <param name="contact_email" type="text" value="" label="Contact e-mail.">
                    <validator type="regex" message="">\S+@\S+</validator>
                </param>
                <param name="contact_address" type="text" value="" label="Contact address.">
                    <validator type="regex" message="">\S+.*</validator>
                </param>
                <param name="contact_url" type="text" value="" optional="true" label="Contact URL.">
                </param>
                <param name="organization_name" type="text" value="" label="Organization name.">
                    <validator type="regex" message="">\S+.*</validator>
                </param>
                <param name="organization_email" type="text" value="" label="Organization e-mail.">
                    <validator type="regex" message="">\S+@\S+</validator>
                </param>
                <param name="organization_address" type="text" value="" label="Organization address.">
                    <validator type="regex" message="">\S+.*</validator>
                </param>
                <param name="organization_url" type="text" value="" optional="true" label="Organization URL.">
                </param>
            </when>
        </conditional>

        <section name="exporting_options" expanded="true" title="Exporting options">

            <conditional name="mzidentml_conditional">
                <param name="mzidentml_creation" type="boolean" truevalue="1" falsevalue="0" checked="true" label="Creates a mzIdentML file" />
                <when value="1">
              	     <param name="include_sequences" type="boolean" truevalue="1" falsevalue="0" checked="false" label="Include the protein sequences in the mzIdentML file" />
                </when>
                <when value="0" />
            </conditional>

            <conditional name="zip_conditional">
                <param name="zip_output_boolean" type="boolean" truevalue="zip" falsevalue="separate" checked="false" label="Compress results into a single zip file" />
                <when value="separate">
                    <param name="export_cps" type="boolean" truevalue="1" falsevalue="0" checked="false" label="Exports the CPS file" />
                </when>
                <when value="zip">
                    <param name="export_reports_when_zip" type="boolean" truevalue="1" falsevalue="0" checked="false" label="Also export reports out of the zip" />
                </when>
            </conditional>

            <!-- FOLLOW-UP REPORTS  -->
            <conditional name="followup_conditional">
                <param name="followup_conditional_selector" type="select" label="Follow-up analysis export options">
                    <option value="yes">Export follow-up analysis</option>
                    <option value="no" selected="True">No</option>
                </param>
                <when value="no" />
                <when value="yes">
                    <param name="followup_export_accession_numbers" label="Proteins: Export accession numbers as TXT" type="select" help="Exports the protein accessions in text format">
                        <option value="0" >Main Accession of Validated Protein Groups</option>
                        <option value="1" >All Accessions of Validated Protein Groups</option>
                        <option value="2" >Non-Validated Accessions</option>
                        <option value="off" selected="True">Do not export</option>
                    </param>
                    <param name="followup_export_sequences" label="Proteins: Export sequences as FASTA" type="select" help="Exports the protein details in fasta format">
                        <option value="0" >Main Accession of Validated Protein Groups</option>
                        <option value="1" >All Accessions of Validated Protein Groups</option>
                        <option value="2" >Non-Validated Accessions</option>
                        <option value="off" selected="True">Do not export</option>
                    </param>
                    <param name="followup_export_proteoforms" label="Proteins: Export proteoforms as TXT" type="select">
                        <option value="on">Export</option>
                        <option value="off" selected="True">Do not export</option>
                    </param>
                </when>
            </conditional>

            <!-- IDENTIFICATION FEATURES REPORTS  -->
            <param name="output_reports" type="select" display="checkboxes" multiple="True" optional="true" label="Identification features reports to be generated">
                <option value="3">PSM Report</option>
                <option value="4">PSM Report with non-validated matches</option>
                <option value="2">PSM Phosphorylation Report</option>
                <option value="11">Extended PSM Report</option>
                <option value="6">Peptide Report</option>
                <option value="7">Peptide Report with non-validated matches</option>
                <option value="5">Peptide Phosphorylation Report</option>
                <option value="9">Protein Report</option>
                <option value="10">Protein Report with non-validated matches</option>
                <option value="8">Protein Phosphorylation Report</option>
                <option value="0">Certificate of Analysis</option>
                <option value="1">Hierarchical Report</option>
            </param>

        </section>

    </inputs>
    <outputs>
        <data format="mzid" name="mzidentML" from_work_dir="output.mzid" label="${tool.name} on ${on_string}: mzidentML file">
            <filter>exporting_options['zip_conditional']['zip_output_boolean'] is False and exporting_options['mzidentml_conditional']['mzidentml_creation'] is True</filter>
        </data>
        <data format="peptideshaker_archive" name="output_cps" from_work_dir="peptideshaker_output.cpsx" label="${tool.name} on ${on_string}: CPS file">
            <filter>exporting_options['zip_conditional']['zip_output_boolean'] is False and exporting_options['zip_conditional']['export_cps'] is True</filter>
        </data>
        <data format="zip" name="output_zip" from_work_dir="peptideshaker_output.zip" label="${tool.name} on ${on_string}: Archive">
            <filter>exporting_options['zip_conditional']['zip_output_boolean'] is True</filter>
        </data>
	<!--
        <data format="tabular" name="reports">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.txt" format="tabular" directory="output_reports" visible="true" assign_primary_output="true" />
        </data>
        -->

        <!-- Follow-up analysis -->
        <data format="txt" name="output_proteins_accessions" from_work_dir="proteins_accession_numbers.txt" label="${tool.name} on ${on_string}: Proteins Accession Numbers">
            <filter>(exporting_options['zip_conditional']['zip_output_boolean'] is False or (exporting_options['zip_conditional']['zip_output_boolean'] is True and exporting_options['zip_conditional']['export_reports_when_zip'] is True) ) and exporting_options['followup_conditional']['followup_conditional_selector'] == 'yes' and exporting_options['output_reports']['followup_conditional']['followup_export_accession_numbers'] != 'off' </filter>
        </data>
        <data format="txt" name="output_proteins_sequences" from_work_dir="proteins_sequences.fasta" label="${tool.name} on ${on_string}: Proteins Sequences">
            <filter>(exporting_options['zip_conditional']['zip_output_boolean'] is False or (exporting_options['zip_conditional']['zip_output_boolean'] is True and exporting_options['zip_conditional']['export_reports_when_zip'] is True) ) and exporting_options['followup_conditional']['followup_conditional_selector'] == 'yes' and exporting_options['output_reports']['followup_conditional']['followup_export_sequences'] != 'off' </filter>
        </data>
        <data format="txt" name="output_proteoforms" from_work_dir="proteins_proteoforms.txt" label="${tool.name} on ${on_string}: Proteins Proteoforms">
            <filter>(exporting_options['zip_conditional']['zip_output_boolean'] is False or (exporting_options['zip_conditional']['zip_output_boolean'] is True and exporting_options['zip_conditional']['export_reports_when_zip'] is True) ) and exporting_options['followup_conditional']['followup_conditional_selector'] == 'yes' and exporting_options['output_reports']['followup_conditional']['followup_export_proteoforms'] != 'off' </filter>
        </data>

        <!-- Identification Features outputs -->
	      <data format="txt" name="output_certificate" from_work_dir="certificate.txt" label="${tool.name} on ${on_string}: Parameters">
            <filter>(exporting_options['zip_conditional']['zip_output_boolean'] is False or (exporting_options['zip_conditional']['zip_output_boolean'] is True and exporting_options['zip_conditional']['export_reports_when_zip'] is True) ) and str(exporting_options['output_reports']) != 'None' and '0' in exporting_options['output_reports']</filter>
        </data>
        <data format="tabular" name="output_hierarchical" from_work_dir="hierarchical.txt" label="${tool.name} on ${on_string}: Hierarchical Report">
            <filter>(exporting_options['zip_conditional']['zip_output_boolean'] is False or (exporting_options['zip_conditional']['zip_output_boolean'] is True and exporting_options['zip_conditional']['export_reports_when_zip'] is True) ) and str(exporting_options['output_reports']) != 'None' and '1' in exporting_options['output_reports']</filter>
        </data>
        <data format="tabular" name="output_psm_phosphorylation" from_work_dir="psm_phospho.txt" label="${tool.name} on ${on_string}: PSM Phosphorylation Report">
            <filter>(exporting_options['zip_conditional']['zip_output_boolean'] is False or (exporting_options['zip_conditional']['zip_output_boolean'] is True and exporting_options['zip_conditional']['export_reports_when_zip'] is True) ) and str(exporting_options['output_reports']) != 'None' and '2' in exporting_options['output_reports']</filter>
        </data>
        <data format="tabular" name="output_psm" from_work_dir="psm.txt" label="${tool.name} on ${on_string}: PSM Report">
            <filter>(exporting_options['zip_conditional']['zip_output_boolean'] is False or (exporting_options['zip_conditional']['zip_output_boolean'] is True and exporting_options['zip_conditional']['export_reports_when_zip'] is True) ) and str(exporting_options['output_reports']) != 'None' and '3' in exporting_options['output_reports']</filter>
        </data>
        <data format="tabular" name="output_psm_nonvalidated" from_work_dir="psm_nonvalidated.txt" label="${tool.name} on ${on_string}: PSM Report with non-validated matches">
            <filter>(exporting_options['zip_conditional']['zip_output_boolean'] is False or (exporting_options['zip_conditional']['zip_output_boolean'] is True and exporting_options['zip_conditional']['export_reports_when_zip'] is True) ) and str(exporting_options['output_reports']) != 'None' and '4' in exporting_options['output_reports']</filter>
        </data>
        <data format="tabular" name="output_extended_psm" from_work_dir="psmx.txt" label="${tool.name} on ${on_string}: Extended PSM Report">
            <filter>(exporting_options['zip_conditional']['zip_output_boolean'] is False or (exporting_options['zip_conditional']['zip_output_boolean'] is True and exporting_options['zip_conditional']['export_reports_when_zip'] is True) ) and str(exporting_options['output_reports']) != 'None' and '11' in exporting_options['output_reports']</filter>
        </data>
        <data format="tabular" name="output_peptides_phosphorylation" from_work_dir="peptides_phospho.txt" label="${tool.name} on ${on_string}: Peptide Phosphorylation Report">
            <filter>(exporting_options['zip_conditional']['zip_output_boolean'] is False or (exporting_options['zip_conditional']['zip_output_boolean'] is True and exporting_options['zip_conditional']['export_reports_when_zip'] is True) ) and str(exporting_options['output_reports']) != 'None' and '5' in exporting_options['output_reports']</filter>
        </data>
        <data format="tabular" name="output_peptides" from_work_dir="peptides.txt" label="${tool.name} on ${on_string}: Peptide Report">
            <filter>(exporting_options['zip_conditional']['zip_output_boolean'] is False or (exporting_options['zip_conditional']['zip_output_boolean'] is True and exporting_options['zip_conditional']['export_reports_when_zip'] is True) ) and str(exporting_options['output_reports']) != 'None' and '6' in exporting_options['output_reports']</filter>
        </data>
        <data format="tabular" name="output_peptides_nonvalidated" from_work_dir="peptides_nonvalidated.txt" label="${tool.name} on ${on_string}: Peptide Report with non-validated matches">
            <filter>(exporting_options['zip_conditional']['zip_output_boolean'] is False or (exporting_options['zip_conditional']['zip_output_boolean'] is True and exporting_options['zip_conditional']['export_reports_when_zip'] is True) ) and str(exporting_options['output_reports']) != 'None' and '7' in exporting_options['output_reports']</filter>
        </data>
        <data format="tabular" name="output_proteins_phosphorylation" from_work_dir="proteins_phospho.txt" label="${tool.name} on ${on_string}: Protein Phosphorylation Report">
            <filter>(exporting_options['zip_conditional']['zip_output_boolean'] is False or (exporting_options['zip_conditional']['zip_output_boolean'] is True and exporting_options['zip_conditional']['export_reports_when_zip'] is True) ) and str(exporting_options['output_reports']) != 'None' and '8' in exporting_options['output_reports']</filter>
        </data>
        <data format="tabular" name="output_proteins" from_work_dir="proteins.txt" label="${tool.name} on ${on_string}: Protein Report">
            <filter>(exporting_options['zip_conditional']['zip_output_boolean'] is False or (exporting_options['zip_conditional']['zip_output_boolean'] is True and exporting_options['zip_conditional']['export_reports_when_zip'] is True) ) and str(exporting_options['output_reports']) != 'None' and '9' in exporting_options['output_reports']</filter>
        </data>
        <data format="tabular" name="output_proteins_nonvalidated" from_work_dir="proteins_nonvalidated.txt" label="${tool.name} on ${on_string}: Protein Repor with non-validated matches">
            <filter>(exporting_options['zip_conditional']['zip_output_boolean'] is False or (exporting_options['zip_conditional']['zip_output_boolean'] is True and exporting_options['zip_conditional']['export_reports_when_zip'] is True) ) and str(exporting_options['output_reports']) != 'None' and '10' in exporting_options['output_reports']</filter>
        </data>
    </outputs>
    <tests>


<!-- TESTS FROM OTHER BRANCH : TO TEST -->
<!--		<test expect_num_outputs="1">
            <param name="searchgui_input" value="tiny_searchgui_modifications_result1.zip" ftype="searchgui_archive"/>
            <param name="processing_options_selector" value="no"/>
            <param name="filtering_options_selector" value="no"/>
            <param name="mzidentml_creation" value="0"/>
            <param name="zip_output_boolean" value="zip"/>
            <param name="export_cps" value="1"/>
            <output name="output_zip" file="peptide_shaker_modifications_result1.zip" ftype="zip" compare="sim_size" delta="3000" />
        </test>
        <test expect_num_outputs="12">
            <param name="searchgui_input" value="tiny_searchgui_modifications_result1.zip" ftype="searchgui_archive"/>
            <param name="processing_options_selector" value="no"/>
            <param name="filtering_options_selector" value="yes"/>
            <param name="min_peptide_length" value="1"/>
            <param name="mzidentml_creation" value="0"/>
            <param name="zip_output_boolean" value="separate"/>
            <param name="output_reports" value="0,1,2,3,4,5,6,7,8,9,10,11"/>
            <output name="output_certificate" file="peptide_shaker_modifications_result1.output_certificate" ftype="txt" lines_diff="8"/>
            <output name="output_hierarchical" file="peptide_shaker_modifications_result1.output_hierarchical" ftype="tabular"/>
            <output name="output_extended_psm" file="peptide_shaker_modifications_result1.output_extended_psm" ftype="tabular"/>
            <output name="output_psm" file="peptide_shaker_modifications_result1.output_psm" ftype="tabular"/>
            <output name="output_psm_phosphorylation" file="peptide_shaker_modifications_result1.output_psm_phosphorylation" ftype="tabular"/>
            <output name="output_psm_nonvalidated" file="peptide_shaker_modifications_result1.output_psm_nonvalidated" ftype="tabular"/>
            <output name="output_peptides" file="peptide_shaker_modifications_result1.output_peptides" ftype="tabular"/>
            <output name="output_peptides_phosphorylation" file="peptide_shaker_modifications_result1.output_peptides_phosphorylation" ftype="tabular"/>
            <output name="output_peptides_nonvalidated" file="peptide_shaker_modifications_result1.output_peptides_nonvalidated" ftype="tabular"/>
            <output name="output_proteins" file="peptide_shaker_modifications_result1.output_proteins" ftype="tabular"/>
            <output name="output_proteins_phosphorylation" file="peptide_shaker_modifications_result1.output_proteins_phosphorylation" ftype="tabular"/>
            <output name="output_proteins_nonvalidated" file="peptide_shaker_modifications_result1.output_proteins_nonvalidated" ftype="tabular"/>
        </test>
        <test expect_num_outputs="2">
            <param name="searchgui_input" value="tiny_searchgui_modifications_result1.zip" ftype="searchgui_archive"/>
            <param name="processing_options_selector" value="no"/>
            <param name="filtering_options_selector" value="no"/>
            <param name="mzidentml_creation" value="0"/>
            <param name="zip_output_boolean" value="separate"/>
            <param name="export_cps" value="1"/>
            <param name="output_reports" value="3"/>
            <output name="output_cps" file="peptide_shaker_modifications_result1.cpsx" ftype="peptideshaker_archive" compare="sim_size" delta="3000"/>
	          <output name="output_psm" file="peptide_shaker_modifications_result1.output_psm" ftype="tabular"/>
        </test>
-->
    </tests>
    <help>
**What it does**

PeptideShaker is a search engine for interpretation of proteomics identification results from multiple search engines, currently supporting X!Tandem, MS-GF+, MS Amanda, OMSSA, MyriMatch, Comet, Tide, Mascot, Andromeda and mzIdentML.

http://compomics.github.io/projects/peptide-shaker.html

----

Reports
=======


PSM Report
----------

* Protein(s):                Protein(s) to which the peptide can be attached
* Sequence:                  Sequence of the peptide
* Variable Modifications:   The variable modifications
* D-score:	                D-score for variable PTM localization
* probabilistic PTM score:	The probabilistic score (e.g. A-score or PhosphoRS) used for variable PTM localization.
* Localization Confidence:	The confidence in variable PTM localization.
* Fixed Modifications:	    The fixed modifications.
* Spectrum File:	The spectrum file.
* Spectrum Title:	The title of the spectrum.
* Spectrum Scan Number:	The spectrum scan number.
* RT:	Retention time
* m/z:	Measured m/z
* Measured Charge:	The charge as given in the spectrum file.
* Identification Charge:	The charge as inferred by the search engine.
* Theoretical Mass:	The theoretical mass of the peptide.
* Isotope Number:	The isotope number targetted by the instrument.
* Precursor m/z Error:	The precursor m/z matching error.
* Score:	Score of the retained peptide as a combination of the algorithm scores (used to rank PSMs).
* Confidence:	Confidence in percent associated to the retained PSM.
* Decoy:	Indicates whether the peptide is a decoy (1: yes, 0: no).
* Validation: Indicates the validation level of the protein group.


Protein Report
--------------

* Main Accession:	Main accession of the protein group.
* Description:	Description of the protein designed by the main accession.
* Gene Name:	The gene names of the Ensembl gene ID associated to the main accession.
* Chromosome:	The chromosome of the Ensembl gene ID associated to the main accession.
* PI:	Protein Inference status of the protein group.
* Secondary Accessions:	Other accessions in the protein group (alphabetical order).
* Protein Group:	The complete protein group (alphabetical order).
* #Peptides:	Total number of peptides.
* #Validated Peptides:	Number of validated peptides.
* #Unique:	Total number of peptides unique to this protein group.
* #PSMs:	Number of PSMs
* #Validated PSMs:	Number of validated PSMs
* Coverage (%):	Sequence coverage in percent of the protein designed by the main accession.
* Possible Coverage (%):	Possible sequence coverage in percent of the protein designed by the main accession according to the search settings.
* MW (kDa):	Molecular Weight.
* Spectrum Counting NSAF: 	Normalized Spectrum Abundance Factor (NSAF)
* Spectrum Counting emPAI:	exponentially modified Protein Abundance Index (emPAI)
* Confident Modification Sites: Number of Confident Modification Sites	List of the sites where a variable modification was confidently localized.
* Other Modification Sites: Number of other Modification Sites	List of the non*confident sites where a variable modification was localized.
* Score:	Score of the protein group.
* Confidence:	Confidence in percent associated to the protein group.
* Decoy:	Indicates whether the protein group is a decoy (1: yes, 0: no).
* Validation:	Indicates the validation level of the protein group.


Peptide Report
--------------


* Protein(s):	Protein(s) to which this peptide can be attached.
* AAs Before:	The amino-acids before the sequence.
* Sequence:	Sequence of the peptide.
* AAs After:	The amino-acids after the sequence.
* Modified Sequence:	The peptide sequence annotated with variable modifications.
* Variable Modifications:	The variable modifications.
* Localization Confidence:	The confidence in PTMs localization.
* Fixed Modifications:	The fixed modifications.
* #Validated PSMs:	Number of validated PSMs.
* #PSMs:	Number of PSMs.
* Score:	Score of the peptide.
* Confidence:	Confidence in percent associated to the peptide.
* Decoy:	Indicates whether the peptide is a decoy (1: yes, 0: no).
* Validation:	Indicates the validation level of the protein group.


Hierachical Report
------------------

* Main Accession:	Main accession of the protein group.
* Description:	Description of the protein designed by the main accession.
* PI:	Protein Inference status of the protein group.
* Secondary Accessions:	Other accessions in the protein group (alphabetical order).
* Protein Group:	The complete protein group (alphabetical order).
* #Peptides:	Total number of peptides.
* #Validated Peptides:	Number of validated peptides.
* #Unique:	Total number of peptides unique to this protein group.
* #PSMs:	Number of PSMs
* #Validated PSMs:	Number of validated PSMs
* Coverage (%):	Sequence coverage in percent of the protein designed by the main accession.
* Possible Coverage (%):	Possible sequence coverage in percent of the protein designed by the main accession according to the search settings.
* MW (kDa):	Molecular Weight.
* Spectrum Counting NSAF: 	Normalized Spectrum Abundance Factor (NSAF)
* Spectrum Counting emPAI:	exponentially modified Protein Abundance Index (emPAI)
* Confident Modification Sites: # Confident Modification Sites	List of the sites where a variable modification was confidently localized.
* Other Modification Sites: # Other Modification Sites	List of the non-confident sites where a variable modification was localized.
* Score:	Score of the protein group.
* Confidence:	Confidence in percent associated to the protein group.
* Decoy:	Indicates whether the protein group is a decoy (1: yes, 0: no).
* Validation:	Indicates the validation level of the protein group.
* Protein(s):	Protein(s) to which this peptide can be attached.
* AAs Before:	The amino-acids before the sequence.
* Sequence:	Sequence of the peptide.
* AAs After:	The amino-acids after the sequence.
* Variable Modifications:	The variable modifications.
* Localization Confidence:	The confidence in PTMs localization.
* Fixed Modifications:	The fixed modifications.
* #Validated PSMs:	Number of validated PSMs.
* #PSMs:	Number of PSMs.
* Score:	Score of the peptide.
* Confidence:	Confidence in percent associated to the peptide.
* Decoy:	Indicates whether the peptide is a decoy (1: yes, 0: no).
* Validation:	Indicates the validation level of the protein group.
* Protein(s):	Protein(s) to which the peptide can be attached.
* Sequence:	Sequence of the peptide.
* Modified Sequence:	The peptide sequence annotated with variable modifications.
* Variable Modifications:	The variable modifications.
* D-score:	D-score for variable PTM localization.
* probabilistic PTM score:	The probabilistic score (e.g. A-score or PhosphoRS) used for variable PTM localization.
* Localization Confidence:	The confidence in variable PTM localization.
* Fixed Modifications:	The fixed modifications.
* Spectrum File:	The spectrum file.
* Spectrum Title:	The title of the spectrum.
* Spectrum Scan Number:	The spectrum scan number.
* RT:	Retention time
* m/z:	Measured m/z
* Measured Charge:	The charge as given in the spectrum file.
* Identification Charge:	The charge as inferred by the search engine.
* Theoretical Mass:	The theoretical mass of the peptide.
* Isotope Number:	The isotope number targetted by the instrument.
* Precursor m/z Error:	The precursor m/z matching error.
* Score:	Score of the retained peptide as a combination of the algorithm scores (used to rank PSMs).
* Confidence:	Confidence in percent associated to the retained PSM.
* Decoy:	Indicates whether the peptide is a decoy (1: yes, 0: no).
* Validation:	Indicates the validation level of the protein group.


------

**Citation**

To cite the underlying tools (PeptideShaker and SearchGUI) please refer to the list of papers at http://compomics.github.io

If you use this tool in Galaxy, please cite Chilton J, Ira Cooke, Bjoern Gruening et al.
    </help>
    <expand macro="citations" />
</tool>
