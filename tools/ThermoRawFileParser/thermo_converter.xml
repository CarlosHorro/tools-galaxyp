<tool id="thermo_raw_file_converter" name="Thermo" version="1.1.2">
    <description>RAW file converter</description>
    <requirements>
        <requirement type="package" version="1.1.2">ThermoRawFileParser</requirement>
    </requirements>
    <command>
<![CDATA[
#import re

#set $temp_stderr = "thermo_converter_stderr"

echo "" > $temp_stderr &&

mkdir ./raws_folder &&
mkdir ./output_folder &&
#for $input_raw in $input:
    #if len($input) > 1
        #set $input_name = re.sub('[^\w\-\.]', '_',$input_raw.element_identifier.split('/')[-1].replace(".raw", "") + ".raw")
        ln -s -f '${input_raw}' './raws_folder/${input_name}' &&
    #else:
        ln -s -f '${input_raw}' './raws_folder/input.raw' &&
    #end if
#end for

(ThermoRawFileParser.sh
    -d=./raws_folder
    -o=./output_folder
    -f=$output_format
    #if $gzip_boolean == 1:
    -g
    #end if
    #if $output_metadata_selector != "off":
        --metadata="${output_metadata_selector}"
    #end if
    #if $zlib_boolean == 0:
    -z
    #end if
    #if $peakpicking_boolean == 0:
    -p
    #end if
    #if $verbose_boolean == 1:
    -v
    #end if
    #if $ignore_instrument_errors_boolean == 1:
    -e
    #end if

    2>> $temp_stderr)

    &&

    #if len($input) == 1:
        #if $gzip_boolean == "0":
            #if $output_format == "0":
                mv ./output_folder/input.mgf ./output_file.out &&
            #else if $output_format == "1":
                mv ./output_folder/input.mzML ./output_file.out &&
            #else if $output_format == "2":
                mv ./output_folder/input.mzML ./output_file.out &&
            ## #else if $output_format == "3":
            ##    mv ./output_folder/input.parquet ./output_file.out &&
            #end if

        #else  ## if we have gzipped output
            #if $output_format == "0":
                mv ./output_folder/input.mgf.gzip ./output_file.gzip &&
            #else if $output_format == "1":
                mv ./output_folder/input.mzML.gzip ./output_file.gzip &&
            #else if $output_format == "2":
                mv ./output_folder/input.mzML.gz ./output_file.gzip &&
            ## #else if $output_format == "3":
            ##    mv ./output_folder/input.parquet.gzip ./output_file.gzip &&
            #end if
        #end if

        #if $output_metadata_selector != "off":
            #if $output_metadata_selector == "0":
                mv ./output_folder/input-metadata.json ./input-metadata.txt &&
            #else if $output_metadata_selector == "1":
                mv ./output_folder/input-metadata.txt ./input-metadata.txt &&
            #end if
        #end if
    #end if

    cat $temp_stderr 2>&1;
]]>
    </command>
    <inputs>
        <param name="input" type="data" format="thermo.raw" label="Thermo RAW file" help="" multiple="true"
          optional="False" />

        <param name="output_format" type="select" label="Output format">
            <option value="0">mgf</option>
            <option value="1" selected="True">mzml</option>
            <option value="2">Indexed mzml</option>
        <!--    <option value="3">Parquet</option> -->
        </param>

        <param name="gzip_boolean" type="boolean" truevalue="1" falsevalue="0" checked="false"
            label="GZip the output file/s" help="" />

        <param name="zlib_boolean" type="boolean" truevalue="1" falsevalue="0" checked="true"
            label="Use zlib compression for the m/z ratios and intensities" help="" />

        <param name="peakpicking_boolean" type="boolean" truevalue="1" falsevalue="0" checked="true"
            label="Use the peak picking provided by the native thermo library" help="" />

        <param name="ignore_instrument_errors_boolean" type="boolean" truevalue="1" falsevalue="0" checked="true"
            label="Ignore missing instrument properties" help="If false, it stops the conversion if instrument properties are missing" />

        <param name="output_metadata_selector" type="select" label="Output metadata" >
            <option value="off" selected="True">No</option>
            <option value="0">json</option>
            <option value="1">txt</option>
        </param>

        <param name="verbose_boolean" type="boolean" truevalue="1" falsevalue="0" checked="false"
            label="Verbose logging" help="" />

    </inputs>
    <outputs>

        <!-- We use simple data outputs if we just have one file, for backwards compatibility -->
        <data name="output" format="mzml" from_work_dir="output_file.out" label="${tool.name} on ${on_string}">
            <change_format>
                <when input="output_format" value="0" format="mgf" />
                <when input="output_format" value="2" format="txt" />
            <!--    <when input="output_format" value="3" format="data" /> --> <!--TODO: parquet format seems not supported by galaxy yet -->
            </change_format>
            <filter>len(input) == 1</filter>
            <filter>gzip_boolean == 0</filter>
        </data>

        <data name="output_gzipped" format="zip" from_work_dir="output_file.gzip" label="${tool.name} on ${on_string}">
            <filter>len(input) == 1</filter>
            <filter>gzip_boolean == 1</filter>
        </data>


        <data name="output_metadata" format="txt" label="${tool.name} on ${on_string}: Metadata" from_work_dir="input-metadata.txt">
            <change_format>
                <when input="output_metadata_selector" value="0" format="json" />
            </change_format>
            <filter>len(input) == 1</filter>
            <filter>output_metadata_selector != "off"</filter>
        </data>

        <!-- We use collections if we have multiple input files -->
        <collection name="output_mgf_collection" type="list" label="${tool.name} on ${on_string}: MGF">
            <filter>output_format == "0"</filter>
            <filter>len(input) > 1</filter>
            <filter>gzip_boolean == 0</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.mgf" directory="output_folder" ext="mgf"/>
        </collection>

        <collection name="output_mzml_collection" type="list" label="${tool.name} on ${on_string}: mzML">
            <filter>output_format == "1"</filter>
            <filter>len(input) > 1</filter>
            <filter>gzip_boolean == 0</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.mzML" ext="mzml" directory="output_folder"/>
        </collection>

        <collection name="output_indexedmzml_collection" type="list" label="${tool.name} on ${on_string}: Indexed mzML">
            <filter>output_format == "2"</filter>
            <filter>len(input) > 1</filter>
            <filter>gzip_boolean == 0</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.mzML" ext="mzml" directory="output_folder"/>
        </collection>
        <!--
        <collection name="output_parquet_collection" type="list" label="${tool.name} on ${on_string}: parquet">
            <filter>output_format == "3"</filter>
            <filter>len(input) > 1</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.parquet" directory="output_folder"/>
        </collection>
      -->
        <collection name="output_gzipped_collection" type="list" label="${tool.name} on ${on_string}: Gzipped data">
            <filter>len(input) > 1</filter>
            <filter>gzip_boolean == 1</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.gz" ext="zip" directory="output_folder"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.gzip" ext="zip" directory="output_folder"/>
        </collection>

        <collection name="output_metadata_collection" type="list" label="${tool.name} on ${on_string}: metadata">
            <filter>output_metadata_selector != "off"</filter>
            <filter>len(input) > 1</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)-metadata.txt" ext="txt" directory="output_folder"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)-metadata.json" ext="json" directory="output_folder"/>
        </collection>

    </outputs>

    <tests>
        <!-- Basic test -->
        <test>
            <param name="input" value="really_small.raw"/>
            <param name="output_format" value="1"/>
            <output name="output" file="really_small.mzml" ftype="mzml" compare="sim_size" delta="3000"  >
            </output>
        </test>

        <!-- Basic gzipping test -->
        <test>
            <param name="input" value="really_small.raw"/>
            <param name="output_format" value="1"/>
            <param name="gzip_boolean" value="1"/>
            <output name="output_gzipped" file="really_small.mzml.gzip" ftype="zip" compare="sim_size" delta="3000"  >
            </output>
        </test>

        <!-- Testing contents of converted mgf file-->
        <test>
            <param name="input" value="really_small.raw"/>
            <param name="output_format" value="0"/>
            <output name="output">
                <assert_contents>
                    <has_text text="SCANS=36"/>
                    <has_text text="RTINSECONDS=73.863181104"/>
                    <has_text text="PEPMASS=675.248779296875"/>
                    <has_text text="CHARGE=2+"/>
                    <has_text text="121.3116455 920.2367553711"/>
                    <has_text text="229.2241211 1137.6958007813"/>
                    <has_text text="1577.8967285 1487.9519042969"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help>
<![CDATA[

Thermo RAW file converter based on the great `ThermoRawFileParser <https://github.com/compomics/ThermoRawFileParser>`_ project.

]]>
    </help>
    <citations>
        <citation type="bibtex">@misc{Galaxy Proteomics Tools,
        author = {Niels Hulstaert, et al.},
        title = {Galaxy Proteomics Tools},
        publisher = {GitHub},
        journal = {GitHub repository},
        year = {2017}, url = {https://github.com/compomics/ThermoRawFileParser}}
        </citation>
    </citations>
</tool>
